name: Push

on:
  push:
    branches: [dev]

env:
  TF_VERSION: 1.0.5
  environment: dev
  organization: bcgov

jobs:
  build:
    runs-on: ubuntu-latest

    # Run local postgres for testing
    # services:
    #   postgres:
    #     image: postgres
    #     env:
    #       POSTGRES_DB: db
    #       POSTGRES_USER: user
    #       POSTGRES_PASSWORD: password
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #     ports:
    #       - 5432:5432

    steps:
      - name: checkout the repo and building the Backend
        uses: actions/checkout@v2

      # - name: run flyway on test database
      #   uses: joshuaavalon/flyway-action@v3.0.0
      #   with:
      #     url: jdbc:postgresql://postgres:5432/db
      #     user: user
      #     password: password
      #     locations: server/flyway/sql
      #   env:
      #     FLYWAY_PLACEHOLDERS_API_DB_USERNAME: appuser
      #     FLYWAY_PLACEHOLDERS_API_DB_PASSWORD: appuserpw

      # - name: Auth function install python test dependencies
      #   working-directory: server/auth_function
      #   run: |
      #     pip install pytest pytest-md pytest-emoji
      #     pip install -r requirements.txt

      # - name: Auth function run pytest
      #   uses: pavelzw/pytest-action@v2
      #   with:
      #     emoji: true
      #     verbose: true
      #     job-summary: true
      #     custom-arguments: 'server/auth_function'
      #   env:
      #     PG_HOST: localhost
      #     PG_PORT: 5432
      #     PG_DATABASE: db
      #     PG_USER: appuser
      #     PG_PASSWORD: appuserpw

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'


      # Steps to deploy the sample API
      - name: Install and Package Dependencies - sample app
        run: |
          cd server/fam_api
          mkdir packaging
          cd packaging
          pip install -t . -r ../requirements.txt
          zip -r9 ../../fam-api.zip .
          cd ..
          rm -rf packaging
          cd ../../
          cd server/fam_api
          zip -u ../fam-api.zip -r app/
          cd ..


      # - name: Run Tests
      #   # Activate the virtualenv in every step
      #   # because GitHub actions doesn't preserve the environment
      #   run: |
      #     cd ./server/fam_api/
      #     . venv/bin/activate && pytest



      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: fam-api
          path: ./server/fam-api.zip
          if-no-files-found: error

      # Steps to deploy Ian's python as a lambda
      - name: Install and Package Dependencies - Ians Code
        run: |
          cd server/backend
          mkdir packaging
          cd packaging
          pip install -t . -r ../requirements.txt
          zip -r9 ../../fam-ui-api.zip .
          cd ..
          rm -rf packaging
          cd ../../
          cd server/backend
          zip -u ../fam-ui-api.zip -r api/ -x database/**\* tests/**\* venv/**\* .env
          cd ..

      - name: Upload zip file artifact Kevin
        uses: actions/upload-artifact@v2
        with:
          name: fam-ui-api
          path: ./server/fam-ui-api.zip
          if-no-files-found: error

      # Steps to deploy authorization lambda function

      - name: Auth function zip
        run: |
          mkdir auth_function_packaging
          rsync -r server/auth_function/* auth_function_packaging -F --exclude=requirements.txt --exclude=test
          pip install -t auth_function_packaging -r server/auth_function/requirements.txt
          cd auth_function_packaging
          zip -r9 ../server/fam_auth_function.zip .
          cd ..
          rm -rf auth_function_packaging

      - name: Auth function upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: fam-auth-function
          path: ./server/fam_auth_function.zip
          if-no-files-found: error

      - name: Deploying back-end using terraform
        run: |
          cd server

          # calculate the db_cluster_snapshot_identifier, attempting to ensure it
          # is less than 63 characters.
          db_cluster_snapshot_identifier="pre-flyway-${{ github.ref_name }}-${{ github.sha }}"
          if ((echo ${{ github.ref_name }} | wc -c ) > 12)
          then
              commit=${{ github.ref_name }}
              db_cluster_snapshot_identifier="pre-flyway-${{ github.ref_name }}-${commit:0:7}"
          fi
          # remove non alphanumeric characters
          db_cluster_snapshot_identifier=$(echo $db_cluster_snapshot_identifier |  tr -d '\n' | tr -cs '[-][:alnum:]' '-' )

          cat <<EOF > backend.hcl
          organization = "${{ env.organization }}"
          workspaces { name = "${{ secrets.LICENCEPLATE }}-${{ env.environment }}-backend" }
          EOF
          cat > github.auto.tfvars <<EOF
          github_repository = "https://github.com/${{ github.repository }}"
          github_branch = "${{ github.ref_name }}"
          github_commit = "${{ github.sha }}"
          github_event = "${{ github.event_name }}"
          oidc_idir_dev_idp_client_id = "${{ secrets.OIDC_IDIR_DEV_IDP_CLIENT_ID }}"
          oidc_idir_dev_idp_client_secret = "${{ secrets.OIDC_IDIR_DEV_IDP_CLIENT_SECRET }}"
          oidc_idir_dev_idp_issuer = "${{ secrets.OIDC_IDIR_DEV_IDP_ISSUER }}"
          oidc_bceid_business_dev_idp_client_id = "${{ secrets.OIDC_BCEID_BUSINESS_DEV_IDP_CLIENT_ID }}"
          oidc_bceid_business_dev_idp_client_secret = "${{ secrets.OIDC_BCEID_BUSINESS_DEV_IDP_CLIENT_SECRET }}"
          oidc_bceid_business_dev_idp_issuer = "${{ secrets.OIDC_BCEID_BUSINESS_DEV_IDP_ISSUER }}"
          db_cluster_snapshot_identifier = "$db_cluster_snapshot_identifier"
          EOF
          terraform init -backend-config=backend.hcl
          terraform apply -auto-approve

      - name: Build / Deploy frontend
        run: |

          # --- commenting this out for now as we arn't using any envs with
          # --- hello world
          # cd server
          # terraform output > ../frontend/.env
          # cd ..frontend
          cd frontend
          npm install

          # not sure why the put it like this, just explicitly calling the
          # build for now
          #CI=false npm run build
          npm run build

          cat <<EOF > backend.hcl
          organization = "${{ env.organization }}"
          workspaces { name = "${{ secrets.LICENCEPLATE }}-${{ env.environment }}-frontend" }
          EOF

          terraform init -backend-config=backend.hcl
          terraform apply -auto-approve

          # finally get the url and test connectivity

          ## grab the domain from the terraform output
          terraform-bin output > domain.txt

          # extract the domain from the terraform output
          url=$(cat domain.txt | grep cf_domain_name | tr -d '\n')
          prefix='cf_domain_name = '
          url=${url#"$prefix"}
          url=https://$(echo $url | tr -d '"')
          echo extracted url: $url

          # execute the actual curl test
          curl  --compressed  $url
          echo ------------- Running Curl Test ------------------------
          curl -sSf --compressed  $url
          echo ---------------- Done ---------------------------
