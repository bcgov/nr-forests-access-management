name: Run Terraform (Frontend)

on:
  workflow_call:
    inputs:
      environment_name:
        required: true
        type: string
      tf_subcommand:
        required: true
        type: string
    secrets:
      licenceplate:
        required: true
      tfc_team_token:
        required: true

env:
  TF_VERSION: 1.2.2
  TG_VERSION: 0.37.1
  TG_SRC_PATH: terraform-frontend
  TG_SERVER_SRC_PATH: terraform
  AWS_REGION: ca-central-1

jobs:
  aws-frontend-deployment:
    name: Run Terraform to Deploy Frontend
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}

    env:
      AWS_AUTOMATION_ADMIN_ROLE: ${{ vars.AWS_AUTOMATION_ADMIN_ROLE }} # original assume_role for provider.
      AWS_OIDC_GHA_ROLE: ${{ vars.FAM_GHA_ROLE }} # AWS-GHA OIDC auth role.

    steps:
      - name: Checkout
        uses: actions/checkout@v2.5.0

      - name: Build Frontend
        working-directory: frontend
        run: |
          npm run install-frontend
          npm run build
          mkdir ../infrastructure/frontend/dist
          rsync -r dist/* ../infrastructure/frontend/dist

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_GHA_ROLE }}
          role-session-name: frontend-${{ inputs.environment_name }}-deployment
          aws-region: ${{ env.AWS_REGION }}

      # TODO: To be removed, migration off the Terraform Cloud
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v2.0.2
      #   with:
      #     terraform_version: ${{ env.TF_VERSION }}
      #     cli_config_credentials_token: ${{ secrets.tfc_team_token }}

      - name: Setup Terragrunt
        uses: peter-murray/terragrunt-github-action@v1.0.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}

      - id: terragrunt-server-output
        name: Terragrunt Server Output
        working-directory: ${{ env.TG_SERVER_SRC_PATH }}/${{ inputs.environment_name }}
        env:
          tfc_workspace: "${{ secrets.licenceplate }}-${{ inputs.environment_name }}"
          tf_workspace: "${{ secrets.licenceplate }}-${{ inputs.environment_name }}"
        run: |
          # Run terraform
          cat > github.auto.tfvars <<EOF
          oidc_idir_idp_client_secret = "NA"
          oidc_bceid_business_idp_client_secret = "NA"
          db_cluster_snapshot_identifier = "NA"
          execute_flyway = false
          target_env = "${{ inputs.environment_name }}"
          aws_terraform_assume_role = "${{ env.AWS_AUTOMATION_ADMIN_ROLE }}"
          EOF
          terragrunt run-all output -json

      - name: Create env.json file
        uses: DamianReeves/write-file-action@master
        with:
          path: infrastructure/frontend/dist/env.json
          contents: |
            ${{ steps.terragrunt-server-output.outputs.stdout }}
          write-mode: overwrite

      - id: terragrunt-server-output-test
        working-directory: infrastructure/frontend/dist
        name: Terragrunt Server Output Verify
        run: |
          echo "printing out contents of env.json"
          echo "===================================="
          cat env.json
          echo "===================================="

      - name: Terragrunt ${{ inputs.tf_subcommand }}
        working-directory: ${{ env.TG_SRC_PATH }}/${{ inputs.environment_name }}
        env:
          tfc_workspace: "${{ secrets.licenceplate }}-${{ inputs.environment_name }}-frontend"
          tf_workspace: "${{ secrets.licenceplate }}-${{ inputs.environment_name }}"
        run: |
          terragrunt run-all ${{ inputs.tf_subcommand }} --terragrunt-non-interactive
