name: LZA Run Terraform (Backend)

# When use GHA OIDC provider and for action to create the JWT, it is required to have the id-token: write permission
# permission can be added at job level or workflow level. Ref: https://github.com/aws-actions/configure-aws-credentials#OIDC
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

on:
  workflow_call:
    inputs:
      environment_name:
        required: true
        type: string
      tf_subcommand:
        required: true
        type: string
      execute_flyway:
        required: false
        type: string
        default: "false"
    secrets:
      licenceplate:
        required: true
      dev_oidc_idir_idp_client_secret:
        required: true
      test_oidc_idir_idp_client_secret:
        required: true
      prod_oidc_idir_idp_client_secret:
        required: true
      dev_oidc_bceid_business_idp_client_secret:
        required: true
      test_oidc_bceid_business_idp_client_secret:
        required: true
      prod_oidc_bceid_business_idp_client_secret:
        required: true
      forest_client_api_api_key_test:
        required: true
      forest_client_api_api_key_prod:
        required: false
      dev_oidc_bcsc_idp_client_secret:
        required: true
      test_oidc_bcsc_idp_client_secret:
        required: true
      prod_oidc_bcsc_idp_client_secret:
        required: true
      idim_proxy_api_api_key:
        required: true
      gc_notify_email_api_key:
        required: true
      fam_update_user_info_api_key:
        required: true

env:
  TF_VERSION: 1.12.2
  TG_VERSION: 0.37.1
  TG_SRC_PATH: lza-infrastructure/landing-zone/server
  AWS_REGION: ca-central-1

jobs:
  aws-server-deployment:
    name: Run Terraform to Deploy Server
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}

    env:
      AWS_OIDC_GHA_ROLE: ${{ vars.FAM_GHA_LZA_ROLE }} # AWS-GHA OIDC auth role.

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install and Package Dependencies - FAM API
        run: |
          cd server/backend
          mkdir packaging
          cd packaging
          pip install -t . -r ../requirements.txt --platform manylinux2014_x86_64 --only-binary=:all:
          zip -r9 ../../fam-ui-api.zip .
          cd ..
          rm -rf packaging
          cd ../../
          cd server/backend
          zip -u ../fam-ui-api.zip -r api/ -x database/**\* tests/**\* venv/**\* .env
          cd ..
          mv fam-ui-api.zip ../lza-infrastructure/terraform/server
          cd ..

      - name: Upload zip file artifact - FAM API
        uses: actions/upload-artifact@v4
        with:
          name: fam-ui-api
          path: ./lza-infrastructure/terraform/server/fam-ui-api.zip
          if-no-files-found: error

      - name: Stage Flyway SQL files
        run: |
          mkdir lza-infrastructure/terraform/server/sql
          rsync -r server/flyway/sql/* lza-infrastructure/terraform/server/sql

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_GHA_ROLE }}
          role-session-name: server-${{ inputs.environment_name }}-deployment
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v3.0.2
        with:
          terragrunt-version: ${{ env.TG_VERSION }}

      - name: Create Terraform vars
        working-directory: ${{ env.TG_SRC_PATH }}/${{ inputs.environment_name }}
        run: |
          # calculate the db_cluster_snapshot_identifier, attempting to ensure it
          # is less than 63 characters and has no non alphanumeric characters
          refname=${{ github.ref_name }}
          commit=${{ github.sha }}
          db_cluster_snapshot_identifier="pre-flyway-${refname:0:12}-${commit:0:7}"
          db_cluster_snapshot_identifier=$(echo $db_cluster_snapshot_identifier |  tr -d '\n' | tr -cs '[-][:alnum:]' '-' )
          echo $db_cluster_snapshot_identifier

          # Pass variables from github actions to terraform
          cat > github.auto.tfvars <<EOF
          db_cluster_snapshot_identifier = "$db_cluster_snapshot_identifier"
          execute_flyway = ${{ inputs.execute_flyway }}
          dev_oidc_idir_idp_client_secret = "${{ secrets.dev_oidc_idir_idp_client_secret }}"
          test_oidc_idir_idp_client_secret = "${{ secrets.test_oidc_idir_idp_client_secret }}"
          prod_oidc_idir_idp_client_secret = "${{ secrets.prod_oidc_idir_idp_client_secret }}"
          dev_oidc_bceid_business_idp_client_secret = "${{ secrets.dev_oidc_bceid_business_idp_client_secret }}"
          test_oidc_bceid_business_idp_client_secret = "${{ secrets.test_oidc_bceid_business_idp_client_secret }}"
          prod_oidc_bceid_business_idp_client_secret = "${{ secrets.prod_oidc_bceid_business_idp_client_secret }}"
          forest_client_api_api_key_test = "${{ secrets.forest_client_api_api_key_test }}"
          forest_client_api_api_key_prod = "${{ secrets.forest_client_api_api_key_prod }}"
          dev_oidc_bcsc_idp_client_secret = "${{ secrets.dev_oidc_bcsc_idp_client_secret }}"
          test_oidc_bcsc_idp_client_secret = "${{ secrets.test_oidc_bcsc_idp_client_secret }}"
          prod_oidc_bcsc_idp_client_secret = "${{ secrets.prod_oidc_bcsc_idp_client_secret }}"
          idim_proxy_api_api_key = "${{ secrets.idim_proxy_api_api_key }}"
          gc_notify_email_api_key = "${{ secrets.gc_notify_email_api_key }}"
          fam_update_user_info_api_key = "${{ secrets.fam_update_user_info_api_key }}"
          EOF

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terragrunt ${{ inputs.tf_subcommand }}
        working-directory: ${{ env.TG_SRC_PATH }}/${{ inputs.environment_name }}
        env:
          licenceplate: ${{ secrets.licenceplate }}
          target_env: ${{ inputs.environment_name }}
        run: |
          # Run terraform
          terragrunt run-all ${{ inputs.tf_subcommand }} --terragrunt-non-interactive

      - name: Wait for 30 seconds
        run: |
          echo "Waiting for 30 seconds before executing the smoke test..."
          sleep 30s

      - id: smoke_test
        name: Smoke Test
        working-directory: ${{ env.TG_SRC_PATH }}/${{ inputs.environment_name }}
        env:
          licenceplate: ${{ secrets.licenceplate }}
          target_env: ${{ inputs.environment_name }}
        run: |
          # Wait for 1 minute
            echo "Waiting for 1 minute before running the smoke test..."
            sleep 60

          # Run smoke test
            if [[ "apply" == "${{ inputs.tf_subcommand }}" ]]
            then
              fam_api_base_url=`terragrunt run-all output fam_api_base_url --terragrunt-non-interactive | sed 's/^"//' | sed 's/"$//'`
              smoke_test_url="$fam_api_base_url/smoke_test"
              echo "Smoke test URL: [$smoke_test_url]"
              curl --silent --show-error --fail $smoke_test_url
            else
              echo "Not executing terraform apply - smoke test skipped"
            fi
