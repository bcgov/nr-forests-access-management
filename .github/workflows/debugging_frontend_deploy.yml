# leaving this in the repo for now as its a useful action that can be used
# to speed up debugging of frontend deployment.

# have disabled all triggers so it shouldn't run.

name: Push

on:
  push:
    #branches: [feat/165-sample-vue-app]
    branches: [branch-name-that-doesnt-exist]

env:
  TF_VERSION: 1.0.5
  environment: dev
  organization: bcgov

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: checkout the repo and building the Backend
        uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}


      - name: Building front-end and deploying Frontend using terraform
        run: |
          # --- commenting this out for now as we arn't using any envs with
          # --- hello world
          # cd server
          # terraform output > ../frontend/.env
          # cd ..frontend
          cd frontend
          npm install

          # not sure why the put it like this, just explicitly calling the
          # build for now
          #CI=false npm run build
          npm run build

          cat <<EOF > backend.hcl
          organization = "${{ env.organization }}"
          workspaces { name = "${{ secrets.LICENCEPLATE }}-${{ env.environment }}-frontend" }
          EOF

          terraform init -backend-config=backend.hcl
          #terraform plan
          # force replacement of the component
          #terraform apply -auto-approve -replace=aws_cloudfront_distribution.web_distribution
          terraform apply -auto-approve

      - name: Terraform - Retrieve cloudfront domain
        run: |
          cd frontend

          # terraform config / setup
          cat <<EOF > backend.hcl
          organization = "${{ env.organization }}"
          workspaces { name = "${{ secrets.LICENCEPLATE }}-${{ env.environment }}-frontend" }
          EOF
          terraform init -backend-config=backend.hcl

          # grab the domain from the terraform output
          terraform-bin output > domain.txt

          # extract the domain from the terraform output
          url=$(cat domain.txt | grep cf_domain_name | tr -d '\n')
          prefix='cf_domain_name = '
          url=${url#"$prefix"}
          url=https://$(echo $url | tr -d '"')
          echo extracted url: $url

          # execute the actual curl test
          sleep 2
          curl  --compressed  $url
          echo ------------- Running Curl Test ------------------------
          curl -sSf --compressed  $url
          echo ---------------- Done ---------------------------

