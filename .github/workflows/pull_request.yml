name: Pull Request

on:
  pull_request:
    branches: [dev]
env:
  environment: dev
  organization: bcgov

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: checkout the repo and building the Backend
        uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Python Virtual ENV
        run: pip3 install virtualenv

      # Steps to create sample lambda zip file

      # Step-3 Setup Virtual ENV
      # https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows
      - name:  Virtual ENV
        uses: actions/cache@v2
        id: cache-venv # name for referring later
        with:
          path: server/fam_api/venv # what we cache: the Virtual ENV
          # The cache key depends on requirements.txt
          key: ${{ runner.os }}-venv-${{ hashFiles('**/server/fam_api/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

       # Step-4 Build a Virtual ENV, but only if it doesn't already exist
      - name: Activate Virtual ENV
        run: |
          cd ./server/fam_api
          python -m venv venv && source venv/bin/activate && pip3 install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'
   
      - name: Create archive of dependencies
        run: |
          cd server/fam_api/venv/lib/python3.8/site-packages
          zip -r9 ../../../../../fam-api.zip .

      - name: Add API files to Zip file
        run: |
          cd server/fam_api
          zip -u ../fam-api.zip -r app/
          cd ..

      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: fam-api
          path: ./server/fam-api.zip
          if-no-files-found: error 

  # Steps to deploy Kevin's python as a lambda

  # Step-3 Setup Virtual ENV
      # https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows
      - name:  Virtual ENV Kevin
        uses: actions/cache@v2
        id: cache-venv-kevin # name for referring later
        with:
          path: server/backend/venv # what we cache: the Virtual ENV
          # The cache key depends on requirements.txt
          key: ${{ runner.os }}-venv-${{ hashFiles('**/server/backend/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

       # Step-4 Build a Virtual ENV, but only if it doesn't already exist
      - name: Activate Virtual ENV Kevin
        run: |
          cd ./server/backend
          python -m venv venv && source venv/bin/activate && pip3 install -r requirements.txt
        if: steps.cache-venv-kevin.outputs.cache-hit != 'true'
   
      - name: Create archive of dependencies Kevin
        run: |
          cd server/backend/venv/lib/python3.8/site-packages
          zip -r9 ../../../../../fam-ui-api.zip .

      - name: Add API files to Zip file Kevin
        run: |
          cd server/backend
          zip -u ../fam-ui-api.zip -r api/
          cd ..

      - name: Upload zip file artifact Kevin
        uses: actions/upload-artifact@v2
        with:
          name: fam-ui-api
          path: ./server/fam-ui-api.zip
          if-no-files-found: error           

      - name: Deploying back-end using terraform
        run: |
          cd server
          cat <<EOF > backend.hcl
          organization = "${{ env.organization }}"
          workspaces { name = "${{ secrets.LICENCEPLATE }}-${{ env.environment }}-backend" }
          EOF
          cat > github.auto.tfvars <<EOF
          github_repository = "https://github.com/${{ github.repository }}"
          github_branch = "${{ github.ref_name }}"
          github_commit = "${{ github.sha }}"
          github_event = "${{ github.event_name }}"
          EOF
          terraform init -backend-config=backend.hcl
          terraform plan

      # - name: Building front-end and deploying Frontend using terraform
      #   run: |
      #     cd server
      #     terraform output > ../client/.env
      #     cd ../client
      #     npm install

      #     CI=false npm run build

      #     cat <<EOF > backend.hcl
      #     organization = "${{ env.organization }}"
      #     workspaces { name = "${{ secrets.LICENCEPLATE }}-${{ env.environment }}-frontend" }
      #     EOF

      #     terraform init -backend-config=backend.hcl
      #     terraform plan
