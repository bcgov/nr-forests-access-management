name: Node.js CI

on:
  pull_request:
    branches: [dev]
env:
  environment: dev
  organization: bcgov

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: checkout the repo and building the Backend
        uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Create Zip directory
        run: |
          mkdir -p $GITHUB_WORKSPACE/app_v1 && cp -R $GITHUB_WORKSPACE/server/fam_api/app app_v1
          ls app_v1
          python -m pip install --upgrade pip
          cp -R /opt/hostedtoolcache/Python/3.8.13/x64/lib/python3.8/site-packages app_v1
          pip install -t app_v1 flake8 pytest
          if [ -f requirements.txt ]; then pip install -t app_v1 -r requirements.txt; fi
          ls app_v1

      # - name: Copy
      #   uses: andstor/copycat-action@v3
      #   with:
      #  #  personal_token: ${{ secrets.PERSONAL_TOKEN }}
      #     src_path: server/fam_api/app
      #     dst_path: app_v1
      #     dst_owner: bcgov
      #     dst_repo_name: nr-forests-access-management
      #     src_branch: feat/buildFamApi
          
      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # - name: Test with pytest
      #   run: |
      #     pytest

      # - name: Copy api files into a new directory
      #   run:
        #  mkdir app 
        #  cp -R /server/fam_api/app app
        # cp -R /usr/local/lib/python3.8/dist-packages app

      # - name: Zip the source code and the requirements libraries into fam_api.zip
      #   run: |
      #     cd server/fam_api/venv/lib/python3.8/site-packages
      #     zip -r9 ../../../../fam_api_new.zip .
      #     cd ../../fam_api
      #     zip -g ./fam_api_new.zip -r app


      - name: Zipping the source code and the requirements libraries into fam_api.zip
        uses: montudor/action-zip@v1
        with:
          args:  zip -qq -r fam_api.zip . -i app_v1
      
      - uses: actions/upload-artifact@v3
        with:
          name: fam_api_zip_file-1
          path: server/fam_api/fam_api_new.zip

      # - name: Deploying back-end using terraform
      #   run: |
      #     cd server
      #     cat <<EOF > backend.hcl
      #     organization = "${{ env.organization }}"
      #     workspaces { name = "${{ secrets.LICENCEPLATE }}-${{ env.environment }}-backend" }
      #     EOF
      #     cat > github.auto.tfvars <<EOF
      #     github_repository = "https://github.com/${{ github.repository }}"
      #     github_branch = "${{ github.ref_name }}"
      #     github_commit = "${{ github.sha }}"
      #     github_event = "${{ github.event_name }}"
      #     EOF
      #     terraform init -backend-config=backend.hcl
      #     terraform plan

      # - name: Building front-end and deploying Frontend using terraform
      #   run: |
      #     cd server
      #     terraform output > ../client/.env
      #     cd ../client
      #     npm install

      #     CI=false npm run build

      #     cat <<EOF > backend.hcl
      #     organization = "${{ env.organization }}"
      #     workspaces { name = "${{ secrets.LICENCEPLATE }}-${{ env.environment }}-frontend" }
      #     EOF

      #     terraform init -backend-config=backend.hcl
      #     terraform plan
