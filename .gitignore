# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log

# Ignore any .tfvars files that are generated automatically for each Terraform run. Most
# .tfvars files are managed as part of configuration and so should be included in
# version control.
#
# example.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

*.db
.env
venv
venvdc
__pycache__
.coverage
.pytest_cache

junk*

aurora/.terraform.lock.hcl
aurora/aurora.hcl

server/.terraform.lock.hcl
server/backend.hcl
server/credentials.tfrc.json
server/fam_auth_function.zip
server/fam-api.zip
server/fam-ui-api.zip
server/github.auto.tfvars
server/junk.bash
server/localtest.auto.tfvars
server/my-deployment-package.zip
server/packagelambda.bash

server/backend/database/flyway*
server/backend/api/alembic/versions-modified/*
server/backend/api/app/models/model-back.py
server/backend/packaging/*
server/packaging/*

functional-tests/.project
frontend/domain.txt
server/credentials.tfrc.json
server/fam_auth_function.zip
server/fam-ui-api.zip

server/junk.bash
infrastructure/server/github.auto.tfvars
terraform/test/server.json
terraform/test/.terraform.lock.hcl
**/.terragrunt-cache/**
