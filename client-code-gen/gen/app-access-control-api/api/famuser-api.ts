/* tslint:disable */
/* eslint-disable */
/**
 * Forest Access Management - FAM - API
 *  Forest Access Management API used by the Forest Access Management application to Define who has access to what apps, and what roles they will operate under  once access is granted. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: SIBIFSAF@victoria1.gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { FamUserUpdateResponse } from '../model';
// @ts-ignore
import { HTTPValidationError } from '../model';
/**
 * FAMUserApi - axios parameter creator
 * @export
 */
export const FAMUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Call IDIM web service to grab latest user information and update records in FAM database for IDIR and Business BCeID users
         * @summary Update User Information From Idim Source
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {boolean} [usePagination] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserInformationFromIdimSource: async (page?: number, perPage?: number, usePagination?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/users-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (usePagination !== undefined) {
                localVarQueryParameter['use_pagination'] = usePagination;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FAMUserApi - functional programming interface
 * @export
 */
export const FAMUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FAMUserApiAxiosParamCreator(configuration)
    return {
        /**
         * Call IDIM web service to grab latest user information and update records in FAM database for IDIR and Business BCeID users
         * @summary Update User Information From Idim Source
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {boolean} [usePagination] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserInformationFromIdimSource(page?: number, perPage?: number, usePagination?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FamUserUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserInformationFromIdimSource(page, perPage, usePagination, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FAMUserApi.updateUserInformationFromIdimSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FAMUserApi - factory interface
 * @export
 */
export const FAMUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FAMUserApiFp(configuration)
    return {
        /**
         * Call IDIM web service to grab latest user information and update records in FAM database for IDIR and Business BCeID users
         * @summary Update User Information From Idim Source
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {boolean} [usePagination] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserInformationFromIdimSource(page?: number, perPage?: number, usePagination?: boolean, options?: any): AxiosPromise<FamUserUpdateResponse> {
            return localVarFp.updateUserInformationFromIdimSource(page, perPage, usePagination, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FAMUserApi - interface
 * @export
 * @interface FAMUserApi
 */
export interface FAMUserApiInterface {
    /**
     * Call IDIM web service to grab latest user information and update records in FAM database for IDIR and Business BCeID users
     * @summary Update User Information From Idim Source
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {boolean} [usePagination] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUserApiInterface
     */
    updateUserInformationFromIdimSource(page?: number, perPage?: number, usePagination?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<FamUserUpdateResponse>;

}

/**
 * FAMUserApi - object-oriented interface
 * @export
 * @class FAMUserApi
 * @extends {BaseAPI}
 */
export class FAMUserApi extends BaseAPI implements FAMUserApiInterface {
    /**
     * Call IDIM web service to grab latest user information and update records in FAM database for IDIR and Business BCeID users
     * @summary Update User Information From Idim Source
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {boolean} [usePagination] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUserApi
     */
    public updateUserInformationFromIdimSource(page?: number, perPage?: number, usePagination?: boolean, options?: RawAxiosRequestConfig) {
        return FAMUserApiFp(this.configuration).updateUserInformationFromIdimSource(page, perPage, usePagination, options).then((request) => request(this.axios, this.basePath));
    }
}

