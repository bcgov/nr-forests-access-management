/* tslint:disable */
/* eslint-disable */
/**
 * Forest Access Management - FAM - API
 *  Forest Access Management API used by the Forest Access Management application to Define who has access to what apps, and what roles they will operate under  once access is granted. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: SIBIFSAF@victoria1.gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../model';
// @ts-ignore
import { PermissionAuditHistoryRes } from '../model';
/**
 * PermissionAuditApi - axios parameter creator
 * @export
 */
export const PermissionAuditApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the permission audit history for a given user and application.  Args:     userId (int): The ID of the user for whom the audit history is being requested.     applicationId (int): The ID of the application associated with the audit history.  Returns:     List[PermissionAuditHistoryRes]: A list of audit history records for the given user and application.
         * @summary Get Permission Audit History By User And Application
         * @param {number} userId 
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionAuditHistoryByUserAndApplication: async (userId: number, applicationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getPermissionAuditHistoryByUserAndApplication', 'userId', userId)
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('getPermissionAuditHistoryByUserAndApplication', 'applicationId', applicationId)
            const localVarPath = `/permission-audit-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication 6jfveou69mgford233or30hmta required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "6jfveou69mgford233or30hmta", [], configuration)

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (applicationId !== undefined) {
                localVarQueryParameter['application_id'] = applicationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionAuditApi - functional programming interface
 * @export
 */
export const PermissionAuditApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionAuditApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the permission audit history for a given user and application.  Args:     userId (int): The ID of the user for whom the audit history is being requested.     applicationId (int): The ID of the application associated with the audit history.  Returns:     List[PermissionAuditHistoryRes]: A list of audit history records for the given user and application.
         * @summary Get Permission Audit History By User And Application
         * @param {number} userId 
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionAuditHistoryByUserAndApplication(userId: number, applicationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermissionAuditHistoryRes>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermissionAuditHistoryByUserAndApplication(userId, applicationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PermissionAuditApi.getPermissionAuditHistoryByUserAndApplication']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PermissionAuditApi - factory interface
 * @export
 */
export const PermissionAuditApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionAuditApiFp(configuration)
    return {
        /**
         * Retrieve the permission audit history for a given user and application.  Args:     userId (int): The ID of the user for whom the audit history is being requested.     applicationId (int): The ID of the application associated with the audit history.  Returns:     List[PermissionAuditHistoryRes]: A list of audit history records for the given user and application.
         * @summary Get Permission Audit History By User And Application
         * @param {number} userId 
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionAuditHistoryByUserAndApplication(userId: number, applicationId: number, options?: any): AxiosPromise<Array<PermissionAuditHistoryRes>> {
            return localVarFp.getPermissionAuditHistoryByUserAndApplication(userId, applicationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PermissionAuditApi - interface
 * @export
 * @interface PermissionAuditApi
 */
export interface PermissionAuditApiInterface {
    /**
     * Retrieve the permission audit history for a given user and application.  Args:     userId (int): The ID of the user for whom the audit history is being requested.     applicationId (int): The ID of the application associated with the audit history.  Returns:     List[PermissionAuditHistoryRes]: A list of audit history records for the given user and application.
     * @summary Get Permission Audit History By User And Application
     * @param {number} userId 
     * @param {number} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionAuditApiInterface
     */
    getPermissionAuditHistoryByUserAndApplication(userId: number, applicationId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PermissionAuditHistoryRes>>;

}

/**
 * PermissionAuditApi - object-oriented interface
 * @export
 * @class PermissionAuditApi
 * @extends {BaseAPI}
 */
export class PermissionAuditApi extends BaseAPI implements PermissionAuditApiInterface {
    /**
     * Retrieve the permission audit history for a given user and application.  Args:     userId (int): The ID of the user for whom the audit history is being requested.     applicationId (int): The ID of the application associated with the audit history.  Returns:     List[PermissionAuditHistoryRes]: A list of audit history records for the given user and application.
     * @summary Get Permission Audit History By User And Application
     * @param {number} userId 
     * @param {number} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionAuditApi
     */
    public getPermissionAuditHistoryByUserAndApplication(userId: number, applicationId: number, options?: RawAxiosRequestConfig) {
        return PermissionAuditApiFp(this.configuration).getPermissionAuditHistoryByUserAndApplication(userId, applicationId, options).then((request) => request(this.axios, this.basePath));
    }
}

