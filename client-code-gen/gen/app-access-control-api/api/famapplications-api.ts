/* tslint:disable */
/* eslint-disable */
/**
 * Forest Access Management - FAM - API
 *  Forest Access Management API used by the Forest Access Management application to Define who has access to what apps, and what roles they will operate under  once access is granted. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: SIBIFSAF@victoria1.gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { FamUserInfoSchema } from '../model';
// @ts-ignore
import { HTTPValidationError } from '../model';
// @ts-ignore
import { PagedResultsSchemaFamApplicationUserRoleAssignmentGetSchema } from '../model';
// @ts-ignore
import { SortOrderEnum } from '../model';
// @ts-ignore
import { UserRoleSortByEnum } from '../model';
/**
 * FAMApplicationsApi - axios parameter creator
 * @export
 */
export const FAMApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the user data for a given user id under an authorized application.  Args:     userId (int): The ID of the user.     applicationId (int): The ID of the application the user has access to.  Returns:     FamUserInfoSchema: The user information corresponding to the provided userId.
         * @summary Retrieve User Information by User ID under an application
         * @param {number} userId 
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationUserById: async (userId: number, applicationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getApplicationUserById', 'userId', userId)
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('getApplicationUserById', 'applicationId', applicationId)
            const localVarPath = `/fam-applications/{application_id}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication 6jfveou69mgford233or30hmta required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "6jfveou69mgford233or30hmta", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets paged users/roles assignment records associated with an application.
         * @summary Get Fam Application User Role Assignment
         * @param {number} applicationId 
         * @param {number | null} [pageNumber] Page number
         * @param {number | null} [pageSize] Number of records per page
         * @param {string | null} [search] Search by keyword
         * @param {SortOrderEnum | null} [sortOrder] Column sorting order by
         * @param {UserRoleSortByEnum | null} [sortBy] Column to be sorted by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamApplicationUserRoleAssignment: async (applicationId: number, pageNumber?: number | null, pageSize?: number | null, search?: string | null, sortOrder?: SortOrderEnum | null, sortBy?: UserRoleSortByEnum | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('getFamApplicationUserRoleAssignment', 'applicationId', applicationId)
            const localVarPath = `/fam-applications/{application_id}/user-role-assignment`
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication 6jfveou69mgford233or30hmta required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "6jfveou69mgford233or30hmta", [], configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FAMApplicationsApi - functional programming interface
 * @export
 */
export const FAMApplicationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FAMApplicationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the user data for a given user id under an authorized application.  Args:     userId (int): The ID of the user.     applicationId (int): The ID of the application the user has access to.  Returns:     FamUserInfoSchema: The user information corresponding to the provided userId.
         * @summary Retrieve User Information by User ID under an application
         * @param {number} userId 
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationUserById(userId: number, applicationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FamUserInfoSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationUserById(userId, applicationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FAMApplicationsApi.getApplicationUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets paged users/roles assignment records associated with an application.
         * @summary Get Fam Application User Role Assignment
         * @param {number} applicationId 
         * @param {number | null} [pageNumber] Page number
         * @param {number | null} [pageSize] Number of records per page
         * @param {string | null} [search] Search by keyword
         * @param {SortOrderEnum | null} [sortOrder] Column sorting order by
         * @param {UserRoleSortByEnum | null} [sortBy] Column to be sorted by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamApplicationUserRoleAssignment(applicationId: number, pageNumber?: number | null, pageSize?: number | null, search?: string | null, sortOrder?: SortOrderEnum | null, sortBy?: UserRoleSortByEnum | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultsSchemaFamApplicationUserRoleAssignmentGetSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFamApplicationUserRoleAssignment(applicationId, pageNumber, pageSize, search, sortOrder, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FAMApplicationsApi.getFamApplicationUserRoleAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FAMApplicationsApi - factory interface
 * @export
 */
export const FAMApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FAMApplicationsApiFp(configuration)
    return {
        /**
         * Retrieve the user data for a given user id under an authorized application.  Args:     userId (int): The ID of the user.     applicationId (int): The ID of the application the user has access to.  Returns:     FamUserInfoSchema: The user information corresponding to the provided userId.
         * @summary Retrieve User Information by User ID under an application
         * @param {number} userId 
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationUserById(userId: number, applicationId: number, options?: any): AxiosPromise<FamUserInfoSchema> {
            return localVarFp.getApplicationUserById(userId, applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets paged users/roles assignment records associated with an application.
         * @summary Get Fam Application User Role Assignment
         * @param {number} applicationId 
         * @param {number | null} [pageNumber] Page number
         * @param {number | null} [pageSize] Number of records per page
         * @param {string | null} [search] Search by keyword
         * @param {SortOrderEnum | null} [sortOrder] Column sorting order by
         * @param {UserRoleSortByEnum | null} [sortBy] Column to be sorted by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamApplicationUserRoleAssignment(applicationId: number, pageNumber?: number | null, pageSize?: number | null, search?: string | null, sortOrder?: SortOrderEnum | null, sortBy?: UserRoleSortByEnum | null, options?: any): AxiosPromise<PagedResultsSchemaFamApplicationUserRoleAssignmentGetSchema> {
            return localVarFp.getFamApplicationUserRoleAssignment(applicationId, pageNumber, pageSize, search, sortOrder, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FAMApplicationsApi - interface
 * @export
 * @interface FAMApplicationsApi
 */
export interface FAMApplicationsApiInterface {
    /**
     * Retrieve the user data for a given user id under an authorized application.  Args:     userId (int): The ID of the user.     applicationId (int): The ID of the application the user has access to.  Returns:     FamUserInfoSchema: The user information corresponding to the provided userId.
     * @summary Retrieve User Information by User ID under an application
     * @param {number} userId 
     * @param {number} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMApplicationsApiInterface
     */
    getApplicationUserById(userId: number, applicationId: number, options?: RawAxiosRequestConfig): AxiosPromise<FamUserInfoSchema>;

    /**
     * Gets paged users/roles assignment records associated with an application.
     * @summary Get Fam Application User Role Assignment
     * @param {number} applicationId 
     * @param {number | null} [pageNumber] Page number
     * @param {number | null} [pageSize] Number of records per page
     * @param {string | null} [search] Search by keyword
     * @param {SortOrderEnum | null} [sortOrder] Column sorting order by
     * @param {UserRoleSortByEnum | null} [sortBy] Column to be sorted by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMApplicationsApiInterface
     */
    getFamApplicationUserRoleAssignment(applicationId: number, pageNumber?: number | null, pageSize?: number | null, search?: string | null, sortOrder?: SortOrderEnum | null, sortBy?: UserRoleSortByEnum | null, options?: RawAxiosRequestConfig): AxiosPromise<PagedResultsSchemaFamApplicationUserRoleAssignmentGetSchema>;

}

/**
 * FAMApplicationsApi - object-oriented interface
 * @export
 * @class FAMApplicationsApi
 * @extends {BaseAPI}
 */
export class FAMApplicationsApi extends BaseAPI implements FAMApplicationsApiInterface {
    /**
     * Retrieve the user data for a given user id under an authorized application.  Args:     userId (int): The ID of the user.     applicationId (int): The ID of the application the user has access to.  Returns:     FamUserInfoSchema: The user information corresponding to the provided userId.
     * @summary Retrieve User Information by User ID under an application
     * @param {number} userId 
     * @param {number} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMApplicationsApi
     */
    public getApplicationUserById(userId: number, applicationId: number, options?: RawAxiosRequestConfig) {
        return FAMApplicationsApiFp(this.configuration).getApplicationUserById(userId, applicationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets paged users/roles assignment records associated with an application.
     * @summary Get Fam Application User Role Assignment
     * @param {number} applicationId 
     * @param {number | null} [pageNumber] Page number
     * @param {number | null} [pageSize] Number of records per page
     * @param {string | null} [search] Search by keyword
     * @param {SortOrderEnum | null} [sortOrder] Column sorting order by
     * @param {UserRoleSortByEnum | null} [sortBy] Column to be sorted by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMApplicationsApi
     */
    public getFamApplicationUserRoleAssignment(applicationId: number, pageNumber?: number | null, pageSize?: number | null, search?: string | null, sortOrder?: SortOrderEnum | null, sortBy?: UserRoleSortByEnum | null, options?: RawAxiosRequestConfig) {
        return FAMApplicationsApiFp(this.configuration).getFamApplicationUserRoleAssignment(applicationId, pageNumber, pageSize, search, sortOrder, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}

