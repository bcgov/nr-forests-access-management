/* tslint:disable */
/* eslint-disable */
/**
 * Forest Access Management - FAM - API
 *  Forest Access Management API used by the Forest Access Management application to Define who has access to what apps, and what roles they will operate under  once access is granted. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: SIBIFSAF@victoria1.gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * BCSCProxyApi - axios parameter creator
 * @export
 */
export const BCSCProxyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bcsc Jwks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscJwks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bcsc/jwks.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bcsc Token Dev
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscTokenDev: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bcsc/token/dev`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bcsc Token Prod
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscTokenProd: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bcsc/token/prod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bcsc Token Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscTokenTest: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bcsc/token/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bcsc Userinfo Dev
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscUserinfoDev: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bcsc/userinfo/dev`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bcsc Userinfo Prod
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscUserinfoProd: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bcsc/userinfo/prod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bcsc Userinfo Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscUserinfoTest: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bcsc/userinfo/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BCSCProxyApi - functional programming interface
 * @export
 */
export const BCSCProxyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BCSCProxyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Bcsc Jwks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bcscJwks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bcscJwks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BCSCProxyApi.bcscJwks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Bcsc Token Dev
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bcscTokenDev(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bcscTokenDev(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BCSCProxyApi.bcscTokenDev']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Bcsc Token Prod
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bcscTokenProd(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bcscTokenProd(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BCSCProxyApi.bcscTokenProd']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Bcsc Token Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bcscTokenTest(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bcscTokenTest(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BCSCProxyApi.bcscTokenTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Bcsc Userinfo Dev
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bcscUserinfoDev(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bcscUserinfoDev(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BCSCProxyApi.bcscUserinfoDev']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Bcsc Userinfo Prod
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bcscUserinfoProd(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bcscUserinfoProd(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BCSCProxyApi.bcscUserinfoProd']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Bcsc Userinfo Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bcscUserinfoTest(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bcscUserinfoTest(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BCSCProxyApi.bcscUserinfoTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BCSCProxyApi - factory interface
 * @export
 */
export const BCSCProxyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BCSCProxyApiFp(configuration)
    return {
        /**
         * 
         * @summary Bcsc Jwks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscJwks(options?: any): AxiosPromise<any> {
            return localVarFp.bcscJwks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bcsc Token Dev
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscTokenDev(options?: any): AxiosPromise<any> {
            return localVarFp.bcscTokenDev(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bcsc Token Prod
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscTokenProd(options?: any): AxiosPromise<any> {
            return localVarFp.bcscTokenProd(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bcsc Token Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscTokenTest(options?: any): AxiosPromise<any> {
            return localVarFp.bcscTokenTest(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bcsc Userinfo Dev
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscUserinfoDev(options?: any): AxiosPromise<any> {
            return localVarFp.bcscUserinfoDev(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bcsc Userinfo Prod
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscUserinfoProd(options?: any): AxiosPromise<any> {
            return localVarFp.bcscUserinfoProd(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bcsc Userinfo Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bcscUserinfoTest(options?: any): AxiosPromise<any> {
            return localVarFp.bcscUserinfoTest(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BCSCProxyApi - interface
 * @export
 * @interface BCSCProxyApi
 */
export interface BCSCProxyApiInterface {
    /**
     * 
     * @summary Bcsc Jwks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApiInterface
     */
    bcscJwks(options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Bcsc Token Dev
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApiInterface
     */
    bcscTokenDev(options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Bcsc Token Prod
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApiInterface
     */
    bcscTokenProd(options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Bcsc Token Test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApiInterface
     */
    bcscTokenTest(options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Bcsc Userinfo Dev
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApiInterface
     */
    bcscUserinfoDev(options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Bcsc Userinfo Prod
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApiInterface
     */
    bcscUserinfoProd(options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Bcsc Userinfo Test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApiInterface
     */
    bcscUserinfoTest(options?: RawAxiosRequestConfig): AxiosPromise<any>;

}

/**
 * BCSCProxyApi - object-oriented interface
 * @export
 * @class BCSCProxyApi
 * @extends {BaseAPI}
 */
export class BCSCProxyApi extends BaseAPI implements BCSCProxyApiInterface {
    /**
     * 
     * @summary Bcsc Jwks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApi
     */
    public bcscJwks(options?: RawAxiosRequestConfig) {
        return BCSCProxyApiFp(this.configuration).bcscJwks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bcsc Token Dev
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApi
     */
    public bcscTokenDev(options?: RawAxiosRequestConfig) {
        return BCSCProxyApiFp(this.configuration).bcscTokenDev(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bcsc Token Prod
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApi
     */
    public bcscTokenProd(options?: RawAxiosRequestConfig) {
        return BCSCProxyApiFp(this.configuration).bcscTokenProd(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bcsc Token Test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApi
     */
    public bcscTokenTest(options?: RawAxiosRequestConfig) {
        return BCSCProxyApiFp(this.configuration).bcscTokenTest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bcsc Userinfo Dev
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApi
     */
    public bcscUserinfoDev(options?: RawAxiosRequestConfig) {
        return BCSCProxyApiFp(this.configuration).bcscUserinfoDev(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bcsc Userinfo Prod
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApi
     */
    public bcscUserinfoProd(options?: RawAxiosRequestConfig) {
        return BCSCProxyApiFp(this.configuration).bcscUserinfoProd(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bcsc Userinfo Test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BCSCProxyApi
     */
    public bcscUserinfoTest(options?: RawAxiosRequestConfig) {
        return BCSCProxyApiFp(this.configuration).bcscUserinfoTest(options).then((request) => request(this.axios, this.basePath));
    }
}

