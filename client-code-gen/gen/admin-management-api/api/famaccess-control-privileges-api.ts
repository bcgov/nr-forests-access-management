/* tslint:disable */
/* eslint-disable */
/**
 * Forest Access Management - FAM - Admin Management API
 *  Forest Access Management Admin Management API used by the Forest Access Management application to define admin access to forest applications. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: SIBIFSAF@victoria1.gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { DelegatedAdminSortByEnum } from '../model';
// @ts-ignore
import { FamAccessControlPrivilegeCreateRequest } from '../model';
// @ts-ignore
import { FamAccessControlPrivilegeResponse } from '../model';
// @ts-ignore
import { HTTPValidationError } from '../model';
// @ts-ignore
import { PagedResultsSchemaFamAccessControlPrivilegeGetResponse } from '../model';
// @ts-ignore
import { SortOrderEnum } from '../model';
/**
 * FAMAccessControlPrivilegesApi - axios parameter creator
 * @export
 */
export const FAMAccessControlPrivilegesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Grant Delegated Admin Privileges
         * @summary Create Access Control Privilege Many
         * @param {FamAccessControlPrivilegeCreateRequest} famAccessControlPrivilegeCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessControlPrivilegeMany: async (famAccessControlPrivilegeCreateRequest: FamAccessControlPrivilegeCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'famAccessControlPrivilegeCreateRequest' is not null or undefined
            assertParamExists('createAccessControlPrivilegeMany', 'famAccessControlPrivilegeCreateRequest', famAccessControlPrivilegeCreateRequest)
            const localVarPath = `/access-control-privileges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication 6jfveou69mgford233or30hmta required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "6jfveou69mgford233or30hmta", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(famAccessControlPrivilegeCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Access Control Privilege
         * @param {number} accessControlPrivilegeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessControlPrivilege: async (accessControlPrivilegeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessControlPrivilegeId' is not null or undefined
            assertParamExists('deleteAccessControlPrivilege', 'accessControlPrivilegeId', accessControlPrivilegeId)
            const localVarPath = `/access-control-privileges/{access_control_privilege_id}`
                .replace(`{${"access_control_privilege_id"}}`, encodeURIComponent(String(accessControlPrivilegeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication 6jfveou69mgford233or30hmta required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "6jfveou69mgford233or30hmta", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export delegated admin assignment records associated with an application as csv data
         * @summary Export delegated ddmin roles information by application ID
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAccessControlPrivilegesByApplicationId: async (applicationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('exportAccessControlPrivilegesByApplicationId', 'applicationId', applicationId)
            const localVarPath = `/access-control-privileges/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication 6jfveou69mgford233or30hmta required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "6jfveou69mgford233or30hmta", [], configuration)

            if (applicationId !== undefined) {
                localVarQueryParameter['application_id'] = applicationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get \'Delegated Admin Privileges\' for an application with pagination.
         * @summary Get Access Control Privileges By Application Id
         * @param {number} applicationId 
         * @param {number | null} [pageNumber] Page number
         * @param {number | null} [pageSize] Number of records per page
         * @param {string | null} [search] Search by keyword
         * @param {SortOrderEnum | null} [sortOrder] Column sorting order by &lt;br&gt;Possible values: [asc, desc]
         * @param {DelegatedAdminSortByEnum | null} [sortBy] Column to be sorted by &lt;br&gt;Possible values: [create_date, user_name, user_type_code, email, full_name, role_display_name, forest_client_number]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessControlPrivilegesByApplicationId: async (applicationId: number, pageNumber?: number | null, pageSize?: number | null, search?: string | null, sortOrder?: SortOrderEnum | null, sortBy?: DelegatedAdminSortByEnum | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('getAccessControlPrivilegesByApplicationId', 'applicationId', applicationId)
            const localVarPath = `/access-control-privileges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication 6jfveou69mgford233or30hmta required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "6jfveou69mgford233or30hmta", [], configuration)

            if (applicationId !== undefined) {
                localVarQueryParameter['application_id'] = applicationId;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FAMAccessControlPrivilegesApi - functional programming interface
 * @export
 */
export const FAMAccessControlPrivilegesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FAMAccessControlPrivilegesApiAxiosParamCreator(configuration)
    return {
        /**
         * Grant Delegated Admin Privileges
         * @summary Create Access Control Privilege Many
         * @param {FamAccessControlPrivilegeCreateRequest} famAccessControlPrivilegeCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccessControlPrivilegeMany(famAccessControlPrivilegeCreateRequest: FamAccessControlPrivilegeCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FamAccessControlPrivilegeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccessControlPrivilegeMany(famAccessControlPrivilegeCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FAMAccessControlPrivilegesApi.createAccessControlPrivilegeMany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Access Control Privilege
         * @param {number} accessControlPrivilegeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccessControlPrivilege(accessControlPrivilegeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccessControlPrivilege(accessControlPrivilegeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FAMAccessControlPrivilegesApi.deleteAccessControlPrivilege']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Export delegated admin assignment records associated with an application as csv data
         * @summary Export delegated ddmin roles information by application ID
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAccessControlPrivilegesByApplicationId(applicationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportAccessControlPrivilegesByApplicationId(applicationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FAMAccessControlPrivilegesApi.exportAccessControlPrivilegesByApplicationId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get \'Delegated Admin Privileges\' for an application with pagination.
         * @summary Get Access Control Privileges By Application Id
         * @param {number} applicationId 
         * @param {number | null} [pageNumber] Page number
         * @param {number | null} [pageSize] Number of records per page
         * @param {string | null} [search] Search by keyword
         * @param {SortOrderEnum | null} [sortOrder] Column sorting order by &lt;br&gt;Possible values: [asc, desc]
         * @param {DelegatedAdminSortByEnum | null} [sortBy] Column to be sorted by &lt;br&gt;Possible values: [create_date, user_name, user_type_code, email, full_name, role_display_name, forest_client_number]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccessControlPrivilegesByApplicationId(applicationId: number, pageNumber?: number | null, pageSize?: number | null, search?: string | null, sortOrder?: SortOrderEnum | null, sortBy?: DelegatedAdminSortByEnum | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultsSchemaFamAccessControlPrivilegeGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccessControlPrivilegesByApplicationId(applicationId, pageNumber, pageSize, search, sortOrder, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FAMAccessControlPrivilegesApi.getAccessControlPrivilegesByApplicationId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FAMAccessControlPrivilegesApi - factory interface
 * @export
 */
export const FAMAccessControlPrivilegesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FAMAccessControlPrivilegesApiFp(configuration)
    return {
        /**
         * Grant Delegated Admin Privileges
         * @summary Create Access Control Privilege Many
         * @param {FamAccessControlPrivilegeCreateRequest} famAccessControlPrivilegeCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessControlPrivilegeMany(famAccessControlPrivilegeCreateRequest: FamAccessControlPrivilegeCreateRequest, options?: any): AxiosPromise<FamAccessControlPrivilegeResponse> {
            return localVarFp.createAccessControlPrivilegeMany(famAccessControlPrivilegeCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Access Control Privilege
         * @param {number} accessControlPrivilegeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessControlPrivilege(accessControlPrivilegeId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAccessControlPrivilege(accessControlPrivilegeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Export delegated admin assignment records associated with an application as csv data
         * @summary Export delegated ddmin roles information by application ID
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAccessControlPrivilegesByApplicationId(applicationId: number, options?: any): AxiosPromise<any> {
            return localVarFp.exportAccessControlPrivilegesByApplicationId(applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get \'Delegated Admin Privileges\' for an application with pagination.
         * @summary Get Access Control Privileges By Application Id
         * @param {number} applicationId 
         * @param {number | null} [pageNumber] Page number
         * @param {number | null} [pageSize] Number of records per page
         * @param {string | null} [search] Search by keyword
         * @param {SortOrderEnum | null} [sortOrder] Column sorting order by &lt;br&gt;Possible values: [asc, desc]
         * @param {DelegatedAdminSortByEnum | null} [sortBy] Column to be sorted by &lt;br&gt;Possible values: [create_date, user_name, user_type_code, email, full_name, role_display_name, forest_client_number]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessControlPrivilegesByApplicationId(applicationId: number, pageNumber?: number | null, pageSize?: number | null, search?: string | null, sortOrder?: SortOrderEnum | null, sortBy?: DelegatedAdminSortByEnum | null, options?: any): AxiosPromise<PagedResultsSchemaFamAccessControlPrivilegeGetResponse> {
            return localVarFp.getAccessControlPrivilegesByApplicationId(applicationId, pageNumber, pageSize, search, sortOrder, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FAMAccessControlPrivilegesApi - interface
 * @export
 * @interface FAMAccessControlPrivilegesApi
 */
export interface FAMAccessControlPrivilegesApiInterface {
    /**
     * Grant Delegated Admin Privileges
     * @summary Create Access Control Privilege Many
     * @param {FamAccessControlPrivilegeCreateRequest} famAccessControlPrivilegeCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMAccessControlPrivilegesApiInterface
     */
    createAccessControlPrivilegeMany(famAccessControlPrivilegeCreateRequest: FamAccessControlPrivilegeCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<FamAccessControlPrivilegeResponse>;

    /**
     * 
     * @summary Delete Access Control Privilege
     * @param {number} accessControlPrivilegeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMAccessControlPrivilegesApiInterface
     */
    deleteAccessControlPrivilege(accessControlPrivilegeId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Export delegated admin assignment records associated with an application as csv data
     * @summary Export delegated ddmin roles information by application ID
     * @param {number} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMAccessControlPrivilegesApiInterface
     */
    exportAccessControlPrivilegesByApplicationId(applicationId: number, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Get \'Delegated Admin Privileges\' for an application with pagination.
     * @summary Get Access Control Privileges By Application Id
     * @param {number} applicationId 
     * @param {number | null} [pageNumber] Page number
     * @param {number | null} [pageSize] Number of records per page
     * @param {string | null} [search] Search by keyword
     * @param {SortOrderEnum | null} [sortOrder] Column sorting order by &lt;br&gt;Possible values: [asc, desc]
     * @param {DelegatedAdminSortByEnum | null} [sortBy] Column to be sorted by &lt;br&gt;Possible values: [create_date, user_name, user_type_code, email, full_name, role_display_name, forest_client_number]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMAccessControlPrivilegesApiInterface
     */
    getAccessControlPrivilegesByApplicationId(applicationId: number, pageNumber?: number | null, pageSize?: number | null, search?: string | null, sortOrder?: SortOrderEnum | null, sortBy?: DelegatedAdminSortByEnum | null, options?: RawAxiosRequestConfig): AxiosPromise<PagedResultsSchemaFamAccessControlPrivilegeGetResponse>;

}

/**
 * FAMAccessControlPrivilegesApi - object-oriented interface
 * @export
 * @class FAMAccessControlPrivilegesApi
 * @extends {BaseAPI}
 */
export class FAMAccessControlPrivilegesApi extends BaseAPI implements FAMAccessControlPrivilegesApiInterface {
    /**
     * Grant Delegated Admin Privileges
     * @summary Create Access Control Privilege Many
     * @param {FamAccessControlPrivilegeCreateRequest} famAccessControlPrivilegeCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMAccessControlPrivilegesApi
     */
    public createAccessControlPrivilegeMany(famAccessControlPrivilegeCreateRequest: FamAccessControlPrivilegeCreateRequest, options?: RawAxiosRequestConfig) {
        return FAMAccessControlPrivilegesApiFp(this.configuration).createAccessControlPrivilegeMany(famAccessControlPrivilegeCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Access Control Privilege
     * @param {number} accessControlPrivilegeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMAccessControlPrivilegesApi
     */
    public deleteAccessControlPrivilege(accessControlPrivilegeId: number, options?: RawAxiosRequestConfig) {
        return FAMAccessControlPrivilegesApiFp(this.configuration).deleteAccessControlPrivilege(accessControlPrivilegeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export delegated admin assignment records associated with an application as csv data
     * @summary Export delegated ddmin roles information by application ID
     * @param {number} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMAccessControlPrivilegesApi
     */
    public exportAccessControlPrivilegesByApplicationId(applicationId: number, options?: RawAxiosRequestConfig) {
        return FAMAccessControlPrivilegesApiFp(this.configuration).exportAccessControlPrivilegesByApplicationId(applicationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get \'Delegated Admin Privileges\' for an application with pagination.
     * @summary Get Access Control Privileges By Application Id
     * @param {number} applicationId 
     * @param {number | null} [pageNumber] Page number
     * @param {number | null} [pageSize] Number of records per page
     * @param {string | null} [search] Search by keyword
     * @param {SortOrderEnum | null} [sortOrder] Column sorting order by &lt;br&gt;Possible values: [asc, desc]
     * @param {DelegatedAdminSortByEnum | null} [sortBy] Column to be sorted by &lt;br&gt;Possible values: [create_date, user_name, user_type_code, email, full_name, role_display_name, forest_client_number]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMAccessControlPrivilegesApi
     */
    public getAccessControlPrivilegesByApplicationId(applicationId: number, pageNumber?: number | null, pageSize?: number | null, search?: string | null, sortOrder?: SortOrderEnum | null, sortBy?: DelegatedAdminSortByEnum | null, options?: RawAxiosRequestConfig) {
        return FAMAccessControlPrivilegesApiFp(this.configuration).getAccessControlPrivilegesByApplicationId(applicationId, pageNumber, pageSize, search, sortOrder, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}

