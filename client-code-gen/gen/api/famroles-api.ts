/* tslint:disable */
/* eslint-disable */
/**
 * Forest Access Management - FAM - API
 *  Forest Access Management API used by the Forest Access Management application to Define who has access to what apps, and what roles they will operate under  once access is granted. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: guy.lafleur@montreal.canadians.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FamRoleCreate } from '../model';
// @ts-ignore
import { FamRoleGet } from '../model';
// @ts-ignore
import { HTTPValidationError } from '../model';
/**
 * FAMRolesApi - axios parameter creator
 * @export
 */
export const FAMRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a role to FAM
         * @summary Create Fam Role
         * @param {FamRoleCreate} famRoleCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFamRole: async (famRoleCreate: FamRoleCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'famRoleCreate' is not null or undefined
            assertParamExists('createFamRole', 'famRoleCreate', famRoleCreate)
            const localVarPath = `/api/v1/fam_roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(famRoleCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of different roles that are administered by FAM
         * @summary Get Fam Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamRoles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/fam_roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FAMRolesApi - functional programming interface
 * @export
 */
export const FAMRolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FAMRolesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a role to FAM
         * @summary Create Fam Role
         * @param {FamRoleCreate} famRoleCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFamRole(famRoleCreate: FamRoleCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FamRoleGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFamRole(famRoleCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of different roles that are administered by FAM
         * @summary Get Fam Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamRoles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FamRoleGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFamRoles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FAMRolesApi - factory interface
 * @export
 */
export const FAMRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FAMRolesApiFp(configuration)
    return {
        /**
         * Add a role to FAM
         * @summary Create Fam Role
         * @param {FamRoleCreate} famRoleCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFamRole(famRoleCreate: FamRoleCreate, options?: any): AxiosPromise<FamRoleGet> {
            return localVarFp.createFamRole(famRoleCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * List of different roles that are administered by FAM
         * @summary Get Fam Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamRoles(options?: any): AxiosPromise<Array<FamRoleGet>> {
            return localVarFp.getFamRoles(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FAMRolesApi - interface
 * @export
 * @interface FAMRolesApi
 */
export interface FAMRolesApiInterface {
    /**
     * Add a role to FAM
     * @summary Create Fam Role
     * @param {FamRoleCreate} famRoleCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMRolesApiInterface
     */
    createFamRole(famRoleCreate: FamRoleCreate, options?: AxiosRequestConfig): AxiosPromise<FamRoleGet>;

    /**
     * List of different roles that are administered by FAM
     * @summary Get Fam Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMRolesApiInterface
     */
    getFamRoles(options?: AxiosRequestConfig): AxiosPromise<Array<FamRoleGet>>;

}

/**
 * FAMRolesApi - object-oriented interface
 * @export
 * @class FAMRolesApi
 * @extends {BaseAPI}
 */
export class FAMRolesApi extends BaseAPI implements FAMRolesApiInterface {
    /**
     * Add a role to FAM
     * @summary Create Fam Role
     * @param {FamRoleCreate} famRoleCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMRolesApi
     */
    public createFamRole(famRoleCreate: FamRoleCreate, options?: AxiosRequestConfig) {
        return FAMRolesApiFp(this.configuration).createFamRole(famRoleCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of different roles that are administered by FAM
     * @summary Get Fam Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMRolesApi
     */
    public getFamRoles(options?: AxiosRequestConfig) {
        return FAMRolesApiFp(this.configuration).getFamRoles(options).then((request) => request(this.axios, this.basePath));
    }
}
