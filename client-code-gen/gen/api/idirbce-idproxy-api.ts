/* tslint:disable */
/* eslint-disable */
/**
 * Forest Access Management - FAM - API
 *  Forest Access Management API used by the Forest Access Management application to Define who has access to what apps, and what roles they will operate under  once access is granted. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: guy.lafleur@montreal.canadians.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../model';
// @ts-ignore
import { IdimProxyIdirInfo } from '../model';
/**
 * IDIRBCeIDProxyApi - axios parameter creator
 * @export
 */
export const IDIRBCeIDProxyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Idir Search
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idirSearch: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('idirSearch', 'userId', userId)
            const localVarPath = `/identity_search/idir`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication 6jfveou69mgford233or30hmta required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "6jfveou69mgford233or30hmta", [], configuration)

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IDIRBCeIDProxyApi - functional programming interface
 * @export
 */
export const IDIRBCeIDProxyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IDIRBCeIDProxyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Idir Search
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idirSearch(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdimProxyIdirInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idirSearch(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IDIRBCeIDProxyApi - factory interface
 * @export
 */
export const IDIRBCeIDProxyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IDIRBCeIDProxyApiFp(configuration)
    return {
        /**
         * 
         * @summary Idir Search
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idirSearch(userId: string, options?: any): AxiosPromise<IdimProxyIdirInfo> {
            return localVarFp.idirSearch(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IDIRBCeIDProxyApi - interface
 * @export
 * @interface IDIRBCeIDProxyApi
 */
export interface IDIRBCeIDProxyApiInterface {
    /**
     * 
     * @summary Idir Search
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDIRBCeIDProxyApiInterface
     */
    idirSearch(userId: string, options?: AxiosRequestConfig): AxiosPromise<IdimProxyIdirInfo>;

}

/**
 * IDIRBCeIDProxyApi - object-oriented interface
 * @export
 * @class IDIRBCeIDProxyApi
 * @extends {BaseAPI}
 */
export class IDIRBCeIDProxyApi extends BaseAPI implements IDIRBCeIDProxyApiInterface {
    /**
     * 
     * @summary Idir Search
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDIRBCeIDProxyApi
     */
    public idirSearch(userId: string, options?: AxiosRequestConfig) {
        return IDIRBCeIDProxyApiFp(this.configuration).idirSearch(userId, options).then((request) => request(this.axios, this.basePath));
    }
}
