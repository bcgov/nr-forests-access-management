/* tslint:disable */
/* eslint-disable */
/**
 * Forest Access Management - FAM - API
 *  Forest Access Management API used by the Forest Access Management application to Define who has access to what apps, and what roles they will operate under  once access is granted. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: guy.lafleur@montreal.canadians.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FamUserRoleAssignmentCreate } from '../model';
// @ts-ignore
import { FamUserRoleAssignmentGet } from '../model';
// @ts-ignore
import { HTTPValidationError } from '../model';
/**
 * FAMUserRoleAssignmentApi - axios parameter creator
 * @export
 */
export const FAMUserRoleAssignmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create FAM user_role_xref association.
         * @summary Create User Role Assignment
         * @param {FamUserRoleAssignmentCreate} famUserRoleAssignmentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserRoleAssignment: async (famUserRoleAssignmentCreate: FamUserRoleAssignmentCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'famUserRoleAssignmentCreate' is not null or undefined
            assertParamExists('createUserRoleAssignment', 'famUserRoleAssignmentCreate', famUserRoleAssignmentCreate)
            const localVarPath = `/user_role_assignment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication 6jfveou69mgford233or30hmta required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "6jfveou69mgford233or30hmta", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(famUserRoleAssignmentCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete FAM user_role_xref association.
         * @summary Delete User Role Assignment
         * @param {number} userRoleXrefId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRoleAssignment: async (userRoleXrefId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRoleXrefId' is not null or undefined
            assertParamExists('deleteUserRoleAssignment', 'userRoleXrefId', userRoleXrefId)
            const localVarPath = `/user_role_assignment/{user_role_xref_id}`
                .replace(`{${"user_role_xref_id"}}`, encodeURIComponent(String(userRoleXrefId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication 6jfveou69mgford233or30hmta required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "6jfveou69mgford233or30hmta", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FAMUserRoleAssignmentApi - functional programming interface
 * @export
 */
export const FAMUserRoleAssignmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FAMUserRoleAssignmentApiAxiosParamCreator(configuration)
    return {
        /**
         * Create FAM user_role_xref association.
         * @summary Create User Role Assignment
         * @param {FamUserRoleAssignmentCreate} famUserRoleAssignmentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserRoleAssignment(famUserRoleAssignmentCreate: FamUserRoleAssignmentCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FamUserRoleAssignmentGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserRoleAssignment(famUserRoleAssignmentCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete FAM user_role_xref association.
         * @summary Delete User Role Assignment
         * @param {number} userRoleXrefId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserRoleAssignment(userRoleXrefId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserRoleAssignment(userRoleXrefId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FAMUserRoleAssignmentApi - factory interface
 * @export
 */
export const FAMUserRoleAssignmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FAMUserRoleAssignmentApiFp(configuration)
    return {
        /**
         * Create FAM user_role_xref association.
         * @summary Create User Role Assignment
         * @param {FamUserRoleAssignmentCreate} famUserRoleAssignmentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserRoleAssignment(famUserRoleAssignmentCreate: FamUserRoleAssignmentCreate, options?: any): AxiosPromise<FamUserRoleAssignmentGet> {
            return localVarFp.createUserRoleAssignment(famUserRoleAssignmentCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete FAM user_role_xref association.
         * @summary Delete User Role Assignment
         * @param {number} userRoleXrefId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRoleAssignment(userRoleXrefId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserRoleAssignment(userRoleXrefId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FAMUserRoleAssignmentApi - interface
 * @export
 * @interface FAMUserRoleAssignmentApi
 */
export interface FAMUserRoleAssignmentApiInterface {
    /**
     * Create FAM user_role_xref association.
     * @summary Create User Role Assignment
     * @param {FamUserRoleAssignmentCreate} famUserRoleAssignmentCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUserRoleAssignmentApiInterface
     */
    createUserRoleAssignment(famUserRoleAssignmentCreate: FamUserRoleAssignmentCreate, options?: AxiosRequestConfig): AxiosPromise<FamUserRoleAssignmentGet>;

    /**
     * Delete FAM user_role_xref association.
     * @summary Delete User Role Assignment
     * @param {number} userRoleXrefId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUserRoleAssignmentApiInterface
     */
    deleteUserRoleAssignment(userRoleXrefId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * FAMUserRoleAssignmentApi - object-oriented interface
 * @export
 * @class FAMUserRoleAssignmentApi
 * @extends {BaseAPI}
 */
export class FAMUserRoleAssignmentApi extends BaseAPI implements FAMUserRoleAssignmentApiInterface {
    /**
     * Create FAM user_role_xref association.
     * @summary Create User Role Assignment
     * @param {FamUserRoleAssignmentCreate} famUserRoleAssignmentCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUserRoleAssignmentApi
     */
    public createUserRoleAssignment(famUserRoleAssignmentCreate: FamUserRoleAssignmentCreate, options?: AxiosRequestConfig) {
        return FAMUserRoleAssignmentApiFp(this.configuration).createUserRoleAssignment(famUserRoleAssignmentCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete FAM user_role_xref association.
     * @summary Delete User Role Assignment
     * @param {number} userRoleXrefId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUserRoleAssignmentApi
     */
    public deleteUserRoleAssignment(userRoleXrefId: number, options?: AxiosRequestConfig) {
        return FAMUserRoleAssignmentApiFp(this.configuration).deleteUserRoleAssignment(userRoleXrefId, options).then((request) => request(this.axios, this.basePath));
    }
}
