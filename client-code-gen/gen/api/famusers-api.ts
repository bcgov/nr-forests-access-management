/* tslint:disable */
/* eslint-disable */
/**
 * Forest Access Management - FAM - API
 *  Forest Access Management API used by the Forest Access Management application to Define who has access to what apps, and what roles they will operate under  once access is granted. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: guy.lafleur@montreal.canadians.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FamUser } from '../model';
// @ts-ignore
import { FamUserGet } from '../model';
// @ts-ignore
import { HTTPValidationError } from '../model';
/**
 * FAMUsersApi - axios parameter creator
 * @export
 */
export const FAMUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a user to FAM
         * @summary Create Fam User
         * @param {FamUser} famUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFamUser: async (famUser: FamUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'famUser' is not null or undefined
            assertParamExists('createFamUser', 'famUser', famUser)
            const localVarPath = `/api/v1/fam_users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(famUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a FAM user
         * @summary Delete Fam User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFamUser: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteFamUser', 'userId', userId)
            const localVarPath = `/api/v1/fam_users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a FAM user
         * @summary Get Fam User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamUser: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getFamUser', 'userId', userId)
            const localVarPath = `/api/v1/fam_users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of different users that are administered by FAM
         * @summary Get Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/fam_users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FAMUsersApi - functional programming interface
 * @export
 */
export const FAMUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FAMUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a user to FAM
         * @summary Create Fam User
         * @param {FamUser} famUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFamUser(famUser: FamUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FamUserGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFamUser(famUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a FAM user
         * @summary Delete Fam User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFamUser(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FamUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFamUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a FAM user
         * @summary Get Fam User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamUser(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FamUserGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFamUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of different users that are administered by FAM
         * @summary Get Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FamUserGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FAMUsersApi - factory interface
 * @export
 */
export const FAMUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FAMUsersApiFp(configuration)
    return {
        /**
         * Add a user to FAM
         * @summary Create Fam User
         * @param {FamUser} famUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFamUser(famUser: FamUser, options?: any): AxiosPromise<FamUserGet> {
            return localVarFp.createFamUser(famUser, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a FAM user
         * @summary Delete Fam User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFamUser(userId: number, options?: any): AxiosPromise<FamUser> {
            return localVarFp.deleteFamUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a FAM user
         * @summary Get Fam User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamUser(userId: number, options?: any): AxiosPromise<FamUserGet> {
            return localVarFp.getFamUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * List of different users that are administered by FAM
         * @summary Get Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<FamUserGet>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FAMUsersApi - interface
 * @export
 * @interface FAMUsersApi
 */
export interface FAMUsersApiInterface {
    /**
     * Add a user to FAM
     * @summary Create Fam User
     * @param {FamUser} famUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUsersApiInterface
     */
    createFamUser(famUser: FamUser, options?: AxiosRequestConfig): AxiosPromise<FamUserGet>;

    /**
     * Delete a FAM user
     * @summary Delete Fam User
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUsersApiInterface
     */
    deleteFamUser(userId: number, options?: AxiosRequestConfig): AxiosPromise<FamUser>;

    /**
     * Get a FAM user
     * @summary Get Fam User
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUsersApiInterface
     */
    getFamUser(userId: number, options?: AxiosRequestConfig): AxiosPromise<FamUserGet>;

    /**
     * List of different users that are administered by FAM
     * @summary Get Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUsersApiInterface
     */
    getUsers(options?: AxiosRequestConfig): AxiosPromise<Array<FamUserGet>>;

}

/**
 * FAMUsersApi - object-oriented interface
 * @export
 * @class FAMUsersApi
 * @extends {BaseAPI}
 */
export class FAMUsersApi extends BaseAPI implements FAMUsersApiInterface {
    /**
     * Add a user to FAM
     * @summary Create Fam User
     * @param {FamUser} famUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUsersApi
     */
    public createFamUser(famUser: FamUser, options?: AxiosRequestConfig) {
        return FAMUsersApiFp(this.configuration).createFamUser(famUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a FAM user
     * @summary Delete Fam User
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUsersApi
     */
    public deleteFamUser(userId: number, options?: AxiosRequestConfig) {
        return FAMUsersApiFp(this.configuration).deleteFamUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a FAM user
     * @summary Get Fam User
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUsersApi
     */
    public getFamUser(userId: number, options?: AxiosRequestConfig) {
        return FAMUsersApiFp(this.configuration).getFamUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of different users that are administered by FAM
     * @summary Get Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMUsersApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return FAMUsersApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }
}
