/* tslint:disable */
/* eslint-disable */
/**
 * Forest Access Management - FAM - API
 *  Forest Access Management API used by the Forest Access Management application to Define who has access to what apps, and what roles they will operate under  once access is granted. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: guy.lafleur@montreal.canadians.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FamApplication } from '../model';
// @ts-ignore
import { FamApplicationRole } from '../model';
// @ts-ignore
import { FamApplicationUserRoleAssignmentGet } from '../model';
// @ts-ignore
import { HTTPValidationError } from '../model';
/**
 * FAMApplicationsApi - axios parameter creator
 * @export
 */
export const FAMApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List of different applications that are administered by FAM
         * @summary Get Applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplications: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fam_applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication 26tltjjfe7ktm4bte7av998d78 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "26tltjjfe7ktm4bte7av998d78", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * gets the roles associated with an application  :param application_id: application id :param db: database session, defaults to Depends(database.get_db)
         * @summary Get Fam Application Roles
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamApplicationRoles: async (applicationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('getFamApplicationRoles', 'applicationId', applicationId)
            const localVarPath = `/fam_applications/{application_id}/fam_roles`
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication 26tltjjfe7ktm4bte7av998d78 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "26tltjjfe7ktm4bte7av998d78", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * gets the roles associated with an application  :param application_id: application id :param db: database session, defaults to Depends(database.get_db)
         * @summary Get Fam Application User Role Assignment
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamApplicationUserRoleAssignment: async (applicationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('getFamApplicationUserRoleAssignment', 'applicationId', applicationId)
            const localVarPath = `/fam_applications/{application_id}/user_role_assignment`
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication 26tltjjfe7ktm4bte7av998d78 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "26tltjjfe7ktm4bte7av998d78", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FAMApplicationsApi - functional programming interface
 * @export
 */
export const FAMApplicationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FAMApplicationsApiAxiosParamCreator(configuration)
    return {
        /**
         * List of different applications that are administered by FAM
         * @summary Get Applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplications(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FamApplication>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplications(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * gets the roles associated with an application  :param application_id: application id :param db: database session, defaults to Depends(database.get_db)
         * @summary Get Fam Application Roles
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamApplicationRoles(applicationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FamApplicationRole>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFamApplicationRoles(applicationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * gets the roles associated with an application  :param application_id: application id :param db: database session, defaults to Depends(database.get_db)
         * @summary Get Fam Application User Role Assignment
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamApplicationUserRoleAssignment(applicationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FamApplicationUserRoleAssignmentGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFamApplicationUserRoleAssignment(applicationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FAMApplicationsApi - factory interface
 * @export
 */
export const FAMApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FAMApplicationsApiFp(configuration)
    return {
        /**
         * List of different applications that are administered by FAM
         * @summary Get Applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplications(options?: any): AxiosPromise<Array<FamApplication>> {
            return localVarFp.getApplications(options).then((request) => request(axios, basePath));
        },
        /**
         * gets the roles associated with an application  :param application_id: application id :param db: database session, defaults to Depends(database.get_db)
         * @summary Get Fam Application Roles
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamApplicationRoles(applicationId: number, options?: any): AxiosPromise<Array<FamApplicationRole>> {
            return localVarFp.getFamApplicationRoles(applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * gets the roles associated with an application  :param application_id: application id :param db: database session, defaults to Depends(database.get_db)
         * @summary Get Fam Application User Role Assignment
         * @param {number} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamApplicationUserRoleAssignment(applicationId: number, options?: any): AxiosPromise<Array<FamApplicationUserRoleAssignmentGet>> {
            return localVarFp.getFamApplicationUserRoleAssignment(applicationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FAMApplicationsApi - interface
 * @export
 * @interface FAMApplicationsApi
 */
export interface FAMApplicationsApiInterface {
    /**
     * List of different applications that are administered by FAM
     * @summary Get Applications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMApplicationsApiInterface
     */
    getApplications(options?: AxiosRequestConfig): AxiosPromise<Array<FamApplication>>;

    /**
     * gets the roles associated with an application  :param application_id: application id :param db: database session, defaults to Depends(database.get_db)
     * @summary Get Fam Application Roles
     * @param {number} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMApplicationsApiInterface
     */
    getFamApplicationRoles(applicationId: number, options?: AxiosRequestConfig): AxiosPromise<Array<FamApplicationRole>>;

    /**
     * gets the roles associated with an application  :param application_id: application id :param db: database session, defaults to Depends(database.get_db)
     * @summary Get Fam Application User Role Assignment
     * @param {number} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMApplicationsApiInterface
     */
    getFamApplicationUserRoleAssignment(applicationId: number, options?: AxiosRequestConfig): AxiosPromise<Array<FamApplicationUserRoleAssignmentGet>>;

}

/**
 * FAMApplicationsApi - object-oriented interface
 * @export
 * @class FAMApplicationsApi
 * @extends {BaseAPI}
 */
export class FAMApplicationsApi extends BaseAPI implements FAMApplicationsApiInterface {
    /**
     * List of different applications that are administered by FAM
     * @summary Get Applications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMApplicationsApi
     */
    public getApplications(options?: AxiosRequestConfig) {
        return FAMApplicationsApiFp(this.configuration).getApplications(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * gets the roles associated with an application  :param application_id: application id :param db: database session, defaults to Depends(database.get_db)
     * @summary Get Fam Application Roles
     * @param {number} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMApplicationsApi
     */
    public getFamApplicationRoles(applicationId: number, options?: AxiosRequestConfig) {
        return FAMApplicationsApiFp(this.configuration).getFamApplicationRoles(applicationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * gets the roles associated with an application  :param application_id: application id :param db: database session, defaults to Depends(database.get_db)
     * @summary Get Fam Application User Role Assignment
     * @param {number} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAMApplicationsApi
     */
    public getFamApplicationUserRoleAssignment(applicationId: number, options?: AxiosRequestConfig) {
        return FAMApplicationsApiFp(this.configuration).getFamApplicationUserRoleAssignment(applicationId, options).then((request) => request(this.axios, this.basePath));
    }
}
