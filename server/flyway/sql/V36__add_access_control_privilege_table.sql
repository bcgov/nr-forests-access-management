-- Create fam_access_control_privilege table
CREATE TABLE IF NOT EXISTS app_fam.fam_access_control_privilege
(
    access_control_privilege_id     bigint          GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    user_id                         bigint          NOT NULL,
    role_id                         bigint          NOT NULL,
    create_user                     varchar(60)     NOT NULL,
    create_date                     timestamp(6)    DEFAULT CURRENT_DATE NOT NULL,
    update_user                     varchar(60),
    update_date                     timestamp(6)    DEFAULT CURRENT_DATE
);

-- Add table/column comments
COMMENT ON TABLE app_fam.fam_access_control_privilege IS 'Access Control Privilege is a cross-reference object that allows for the identification of who are the delegated administrators(User) for an Application for a particular role.'
;
COMMENT ON COLUMN app_fam.fam_access_control_privilege.access_control_privilege_id IS 'Automatically generated key used to identify the uniqueness of a User administers the Application role.'
;
COMMENT ON COLUMN app_fam.fam_access_control_privilege.user_id IS 'Unique ID to reference and identify the user within FAM system.'
;
COMMENT ON COLUMN app_fam.fam_access_control_privilege.role_id IS 'Unique ID to reference and identify the application role within FAM system.'
;
COMMENT ON COLUMN app_fam.fam_access_control_privilege.create_user IS 'The user or proxy account that created the record.'
;
COMMENT ON COLUMN app_fam.fam_access_control_privilege.create_date IS 'The date and time the record was created.'
;
COMMENT ON COLUMN app_fam.fam_access_control_privilege.update_user IS 'The user or proxy account that created or last updated the record.'
;
COMMENT ON COLUMN app_fam.fam_access_control_privilege.update_date IS 'The date and time the record was created or last updated.'
;

-- Create index
CREATE INDEX ix_app_fam_fam_access_control_privilege_user_id ON app_fam.fam_access_control_privilege (user_id)
;
CREATE INDEX ix_app_fam_fam_access_control_privilege_role_id ON app_fam.fam_access_control_privilege (role_id)
;
CREATE UNIQUE INDEX fam_access_control_usr_rle_uk ON app_fam.fam_access_control_privilege(user_id, role_id)
;

-- Add constraints
ALTER TABLE app_fam.fam_access_control_privilege ADD CONSTRAINT fam_access_control_privilege_pk PRIMARY KEY (access_control_privilege_id)
;
ALTER TABLE app_fam.fam_access_control_privilege ADD CONSTRAINT Reffam_access_control_privilege_user
    FOREIGN KEY (user_id)
    REFERENCES app_fam.fam_user(user_id)
;
ALTER TABLE app_fam.fam_access_control_privilege ADD CONSTRAINT Reffam_access_control_privilege_role
    FOREIGN KEY (role_id)
    REFERENCES app_fam.fam_role(role_id)
;

-- Grant privileges for Admin Management API
GRANT SELECT, UPDATE, DELETE, INSERT ON app_fam.fam_access_control_privilege TO ${admin_management_api_db_user}
;
-- -- on 'fam_role' for Read only.
GRANT SELECT ON app_fam.fam_role TO ${admin_management_api_db_user}
;

-- Grant SELECT privilege to Auth Lambda and Application Access Control API
GRANT SELECT ON app_fam.fam_access_control_privilege TO ${auth_lambda_db_user}
;
-- TODO: remove this, api_db_username probably won't read this?
-- GRANT SELECT ON app_fam.fam_access_control_privilege TO ${api_db_username}
-- ;

