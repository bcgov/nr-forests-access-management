"""Add Role-App Constraint and App-Environment Attribute

Revision ID: V18
Revises: V17
Create Date: 2023-01-17 16:00:58.613953

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel

from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'V18'
down_revision = 'V17'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # App-Environment.
    fam_app_environment=op.create_table('fam_app_environment',
    sa.Column('app_environment', sa.String(length=4), nullable=False, comment='Application environment.'),
    sa.Column('description', sa.String(length=100), nullable=True, comment='Description of what the app_environment represents.'),
    sa.Column('effective_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('now()'), nullable=False, comment='The date and time the record was effective.'),
    sa.Column('expiry_date', postgresql.TIMESTAMP(precision=6), nullable=True, comment='The date and time the record expired.'),
    sa.Column('update_date', postgresql.TIMESTAMP(precision=6), nullable=True, comment='The date and time the record was created or last updated.'),
    sa.PrimaryKeyConstraint('app_environment', name='fam_app_environment_pk'),
    schema='app_fam',
    comment='Used by the application to indicate its environment.'
    )

    # Insert New Environment
    op.bulk_insert(
        fam_app_environment,
        [
            {
                "app_environment": "DEV",
                "description": "DEV Environment for Applicaitons.",
            },
            {
                "app_environment": "TEST",
                "description": "TEST Environment for Applicaitons.",
            },
            {
                "app_environment": "PROD",
                "description": "PROD Environment for Applicaitons.",
            },
        ],
    )

    # Add Environment Attribute to FAM_APPLICATION / Unique Constraint Change.
    op.add_column('fam_application', sa.Column('app_environment', sa.String(length=4), nullable=True, comment='Identifies which environment the application is for; DEV, TEST, PROD etc.'), schema='app_fam')
    op.create_foreign_key('reffam_app_env', 'fam_application', 'fam_app_environment', ['app_environment'], ['app_environment'], source_schema='app_fam', referent_schema='app_fam')

    # FAM_ROLE constraints change.
    op.alter_column('fam_role', 'application_id',
               existing_type=sa.BIGINT(),
               nullable=False,
               schema='app_fam')
    op.drop_constraint('fam_rle_name_uk', 'fam_role', schema='app_fam', type_='unique')
    op.create_unique_constraint('fam_rlnm_app_uk', 'fam_role', ['role_name', 'application_id'], schema='app_fam')

    op.alter_column('fam_role', 'role_purpose',
            existing_type=sa.VARCHAR(length=200),
            nullable=True,
            schema='app_fam')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('fam_role', 'role_purpose',
        existing_type=sa.VARCHAR(length=200),
        nullable=False,
        schema='app_fam')
    op.drop_constraint('fam_rlnm_app_uk', 'fam_role', schema='app_fam', type_='unique')
    op.create_unique_constraint('fam_rle_name_uk', 'fam_role', ['role_name'], schema='app_fam')
    op.alter_column('fam_role', 'application_id',
               existing_type=sa.BIGINT(),
               nullable=True,
               schema='app_fam')
    op.drop_constraint('reffam_app_env', 'fam_application', schema='app_fam', type_='foreignkey')
    op.drop_column('fam_application', 'app_environment', schema='app_fam')
    op.drop_table('fam_app_environment', schema='app_fam')
    # ### end Alembic commands ###
