"""add role type

Revision ID: V6
Revises: V5
Create Date: 2022-09-27 09:43:29.964249

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
import app.models.model
import datetime


from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'V6'
down_revision = 'V5'
branch_labels = None
depends_on = None

# capture if offline as dates need to be treated differently for inserts if
# offline
from alembic import context
migration_context = context.get_context()
isOffline = migration_context.environment_context.is_offline_mode()

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('fam_role_type',
    sa.Column('role_type_code', sa.String(length=2), nullable=True, comment='role type code'),
    sa.Column('description', sa.String(length=100), nullable=True, comment='Description of what the role_type_code represents'),
    sa.Column('effective_date',  postgresql.TIMESTAMP(precision=6), nullable=False, comment='The date and time the code was effective.'),
    sa.Column('expiry_date',  postgresql.TIMESTAMP(precision=6), nullable=True, comment='The date and time the code expired.'),
    sa.Column('update_date',  postgresql.TIMESTAMP(precision=6), nullable=True, comment='The date and time the record was created or last updated.'),
    sa.CheckConstraint("role_type_code IN ('C', 'A')"),
    sa.PrimaryKeyConstraint('role_type_code', name='fam_role_type_code_pk'),
    schema='app_fam',
    comment='A role type is a code that is associated with roles that will influence what can be associate with a role.  At time of implementation an abstract role can only have other roles related to it, while a concrete role can only have users associated with it'
    )
    op.add_column('fam_role', sa.Column('role_type_code', sa.String(length=2), nullable=False, comment='Identifies if the role is an abstract or concrete role. Users should only be assigned to roles where role_type=concrete'), schema='app_fam')
    op.create_foreign_key('reffam_role_type', 'fam_role', 'fam_role_type', ['role_type_code'], ['role_type_code'], source_schema='app_fam', referent_schema='app_fam')
    # ### end Alembic commands ###

    famRoleType = app.models.model.FamRoleType.__table__
    currentDate = datetime.datetime.now()
    dateEntry = currentDate

    if isOffline:
        currentDateStr = currentDate.strftime("%Y-%m-%d %H:%M:%S")
        dateEntry = op.inline_literal(currentDateStr)

    op.bulk_insert(famRoleType,
        [
            {'role_type_code': 'A',
            'description': 'Abstract role, can only be associated with other roles',
            'effective_date': dateEntry,
            'update_date': dateEntry
            }
            ,
            {'role_type_code': 'C',
            'description': 'Concrete Role, can only be associated with other users',
            'effective_date': dateEntry,
            'update_date': dateEntry
            }
        ]
    )

# sa.text('LOCALTIMESTAMP')


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('reffam_role_type', 'fam_role', schema='app_fam', type_='foreignkey')
    op.drop_column('fam_role', 'role_type_code', schema='app_fam')
    op.drop_table('fam_role_type', schema='app_fam')
    # ### end Alembic commands ###
