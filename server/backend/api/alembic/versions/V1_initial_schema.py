"""initial schema

Revision ID: V1
Revises:
Create Date: 2022-09-01 09:24:17.057479

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
import os.path
import dotenv

from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'V1'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:

    op.execute("create schema app_fam")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('fam_application',
    sa.Column('application_id', sa.BigInteger(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), nullable=False, comment='Automatically generated key used to identify the uniqueness of an Application registered under FAM'),
    sa.Column('application_name', sa.String(length=100), nullable=False),
    sa.Column('application_description', sa.String(length=200), nullable=False),
    sa.Column('create_user', sa.String(length=30), nullable=False, comment='The user or proxy account that created the record.'),
    sa.Column('create_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=False, comment='The date and time the record was created.'),
    sa.Column('update_user', sa.String(length=30), nullable=True, comment='The user or proxy account that created or last updated the record. '),
    sa.Column('update_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=True, comment='The date and time the record was created or last updated.'),
    sa.PrimaryKeyConstraint('application_id', name='fam_app_pk'),
    sa.UniqueConstraint('application_name', name='fam_app_name_uk'),
    schema='app_fam',
    comment='An application is a digital product that fulfills a specific user goal. It can be a front-end application, a back-end API, a combination of these, or something else entirely.'
    )
    op.create_table('fam_forest_client',
    sa.Column('client_number_id', sa.BigInteger(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), nullable=False, comment='Sequentially assigned number to identify a ministry client.'),
    sa.Column('client_name', sa.String(length=100), nullable=False),
    sa.Column('create_user', sa.String(length=30), nullable=False, comment='The user or proxy account that created the record.'),
    sa.Column('create_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=False, comment='The date and time the record was created.'),
    sa.Column('update_user', sa.String(length=30), nullable=True, comment='The user or proxy account that created or last updated the record. '),
    sa.Column('update_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=True, comment='The date and time the record was created or last updated.'),
    sa.PrimaryKeyConstraint('client_number_id', name='fam_for_cli_pk'),
    sa.UniqueConstraint('client_name', name='fam_for_cli_name_uk'),
    schema='app_fam',
    comment='A forest client is a business, individual, or agency that is identified as an entity that a user can have a privilege "on behalf of".'
    )
    op.create_table('fam_user',
    sa.Column('user_id', sa.BigInteger(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), nullable=False, comment='Automatically generated key used to identify the uniqueness of a User within the FAM Application'),
    sa.Column('user_type', sa.String(length=1), nullable=False),
    sa.Column('user_name', sa.String(length=100), nullable=False),
    sa.Column('create_user', sa.String(length=30), nullable=False, comment='The user or proxy account that created the record.'),
    sa.Column('create_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=False, comment='The date and time the record was created.'),
    sa.Column('user_guid', sa.String(length=32), nullable=True),
    sa.Column('cognito_user_id', sa.String(length=32), nullable=True),
    sa.Column('update_user', sa.String(length=30), nullable=True, comment='The user or proxy account that created or last updated the record. '),
    sa.Column('update_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=True, comment='The date and time the record was created or last updated.'),
    sa.PrimaryKeyConstraint('user_id', name='fam_usr_pk'),
    sa.UniqueConstraint('user_type', 'user_name', name='fam_usr_uk'),
    schema='app_fam',
    comment='A user is a person or system that can authenticate and then interact with an application.'
    )
    op.create_table('fam_application_client',
    sa.Column('application_client_id', sa.BigInteger(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), nullable=False, comment='Automatically generated key used to identify the uniqueness of an OIDC as it corresponds to an identified client '),
    sa.Column('cognito_client_id', sa.String(length=32), nullable=False),
    sa.Column('create_user', sa.String(length=30), nullable=False, comment='The user or proxy account that created the record.'),
    sa.Column('create_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=False, comment='The date and time the record was created.'),
    sa.Column('application_id', sa.BigInteger(), nullable=True, comment='Automatically generated key used to identify the uniqueness of an Application registered under FAM'),
    sa.Column('update_user', sa.String(length=30), nullable=True, comment='The user or proxy account that created or last updated the record. '),
    sa.Column('update_date', sa.String(length=9), server_default=sa.text('CURRENT_DATE'), nullable=True, comment='ZIP code.'),
    sa.ForeignKeyConstraint(['application_id'], ['app_fam.fam_application.application_id'], name='reffam_application31'),
    sa.PrimaryKeyConstraint('application_client_id', name='fam_app_cli_pk'),
    schema='app_fam',
    comment='FAM needs to know the OIDC client ID in order to match to an application. The relationship between OIDC client and application is many-to-one because sometimes there is more than one OIDC client for an application and it is convenient to be able to configure the authorization once (at the application level) and re-use it (at the OIDC level).'
    )
    op.create_table('fam_group',
    sa.Column('group_id', sa.BigInteger(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), nullable=False),
    sa.Column('group_name', sa.String(length=100), nullable=False),
    sa.Column('purpose', sa.String(length=200), nullable=False),
    sa.Column('create_user', sa.String(length=30), nullable=False, comment='The user or proxy account that created the record.'),
    sa.Column('create_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=False, comment='The date and time the record was created.'),
    sa.Column('parent_group_id', sa.BigInteger(), nullable=True),
    sa.Column('client_number_id', sa.BigInteger(), nullable=True, comment='Sequentially assigned number to identify a ministry client.'),
    sa.Column('update_user', sa.String(length=30), nullable=True, comment='The user or proxy account that created or last updated the record. '),
    sa.Column('update_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=True, comment='The date and time the record was created or last updated.'),
    sa.ForeignKeyConstraint(['client_number_id'], ['app_fam.fam_forest_client.client_number_id'], name='reffam_forest_client25'),
    sa.ForeignKeyConstraint(['parent_group_id'], ['app_fam.fam_group.group_id'], name='reffam_group16'),
    sa.PrimaryKeyConstraint('group_id', name='fam_grp_pk'),
    sa.UniqueConstraint('group_name', name='fam_grp_name_uk'),
    schema='app_fam',
    comment='A group is a collection of roles. When a group is assigned to a user, the user indirectly assumes the privileges of all the roles encompassed by the group. Groups are used to define profiles in order to make it easier to manage common sets of roles for users. A group can contain roles from multiple applications in order to handle the case where users typically have a certain set of privileges across multiple applications.'
    )
    op.create_index(op.f('ix_app_fam_fam_group_client_number_id'), 'fam_group', ['client_number_id'], unique=False, schema='app_fam')
    op.create_index(op.f('ix_app_fam_fam_group_parent_group_id'), 'fam_group', ['parent_group_id'], unique=False, schema='app_fam')
    op.create_table('fam_role',
    sa.Column('role_id', sa.BigInteger(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), nullable=False, comment='Automatically generated key used to identify the uniqueness of a Role within the FAM Application'),
    sa.Column('role_name', sa.String(length=100), nullable=False),
    sa.Column('role_purpose', sa.String(length=200), nullable=False),
    sa.Column('application_id', sa.BigInteger(), nullable=False),
    sa.Column('client_number_id', sa.BigInteger(), nullable=False, comment='Sequentially assigned number to identify a ministry client.'),
    sa.Column('create_user', sa.String(length=30), nullable=False, comment='The user or proxy account that created the record.'),
    sa.Column('create_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=False, comment='The date and time the record was created.'),
    sa.Column('parent_role_id', sa.BigInteger(), nullable=True, comment='Automatically generated key used to identify the uniqueness of a Role within the FAM Application'),
    sa.Column('update_user', sa.String(length=30), nullable=True, comment='The user or proxy account that created or last updated the record. '),
    sa.Column('update_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=True, comment='The date and time the record was created or last updated.'),
    sa.ForeignKeyConstraint(['application_id'], ['app_fam.fam_application.application_id'], name='reffam_application22'),
    sa.ForeignKeyConstraint(['client_number_id'], ['app_fam.fam_forest_client.client_number_id'], name='reffam_forest_client24'),
    sa.ForeignKeyConstraint(['parent_role_id'], ['app_fam.fam_role.role_id'], name='reffam_role23'),
    sa.PrimaryKeyConstraint('role_id', name='fam_rle_pk'),
    sa.UniqueConstraint('role_name', name='fam_rle_name_uk'),
    schema='app_fam',
    comment='A role is a qualifier that can be assigned to a user in order to identify a privilege within the context of an application.'
    )
    op.create_index(op.f('ix_app_fam_fam_role_application_id'), 'fam_role', ['application_id'], unique=False, schema='app_fam')
    op.create_index(op.f('ix_app_fam_fam_role_client_number_id'), 'fam_role', ['client_number_id'], unique=False, schema='app_fam')
    op.create_index(op.f('ix_app_fam_fam_role_parent_role_id'), 'fam_role', ['parent_role_id'], unique=False, schema='app_fam')
    op.create_table('fam_application_group_xref',
    sa.Column('application_id', sa.BigInteger(), nullable=False),
    sa.Column('group_id', sa.BigInteger(), nullable=False),
    sa.Column('create_user', sa.String(length=30), nullable=False, comment='The user or proxy account that created the record.'),
    sa.Column('create_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=False, comment='The date and time the record was created.'),
    sa.Column('update_user', sa.String(length=30), nullable=True, comment='The user or proxy account that created or last updated the record. '),
    sa.Column('update_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=True, comment='The date and time the record was created or last updated.'),
    sa.ForeignKeyConstraint(['application_id'], ['app_fam.fam_application.application_id'], name='reffam_application20'),
    sa.ForeignKeyConstraint(['group_id'], ['app_fam.fam_group.group_id'], name='reffam_group19'),
    sa.PrimaryKeyConstraint('application_id', 'group_id', name='fam_app_grp_xref'),
    schema='app_fam'
    )
    op.create_index(op.f('ix_app_fam_fam_application_group_xref_application_id'), 'fam_application_group_xref', ['application_id'], unique=False, schema='app_fam')
    op.create_index(op.f('ix_app_fam_fam_application_group_xref_group_id'), 'fam_application_group_xref', ['group_id'], unique=False, schema='app_fam')
    op.create_table('fam_group_role_xref',
    sa.Column('group_id', sa.BigInteger(), nullable=False),
    sa.Column('role_id', sa.BigInteger(), nullable=False, comment='Automatically generated key used to identify the uniqueness of a Role within the FAM Application'),
    sa.Column('create_user', sa.String(length=30), nullable=False, comment='The user or proxy account that created the record.'),
    sa.Column('create_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=False, comment='The date and time the record was created.'),
    sa.Column('update_user', sa.String(length=30), nullable=True, comment='The user or proxy account that created or last updated the record. '),
    sa.Column('update_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=True, comment='The date and time the record was created or last updated.'),
    sa.ForeignKeyConstraint(['group_id'], ['app_fam.fam_group.group_id'], name='reffam_group18'),
    sa.ForeignKeyConstraint(['role_id'], ['app_fam.fam_role.role_id'], name='reffam_role17'),
    sa.PrimaryKeyConstraint('group_id', 'role_id', name='fam_grp_rle_pk'),
    schema='app_fam'
    )
    op.create_index(op.f('ix_app_fam_fam_group_role_xref_group_id'), 'fam_group_role_xref', ['group_id'], unique=False, schema='app_fam')
    op.create_index(op.f('ix_app_fam_fam_group_role_xref_role_id'), 'fam_group_role_xref', ['role_id'], unique=False, schema='app_fam')
    op.create_table('fam_user_group_xref',
    sa.Column('user_id', sa.BigInteger(), nullable=False, comment='Automatically generated key used to identify the uniqueness of a User within the FAM Application'),
    sa.Column('group_id', sa.BigInteger(), nullable=False),
    sa.Column('create_user', sa.String(length=30), nullable=False, comment='The user or proxy account that created the record.'),
    sa.Column('create_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=False, comment='The date and time the record was created.'),
    sa.Column('update_user', sa.String(length=30), nullable=True, comment='The user or proxy account that created or last updated the record. '),
    sa.Column('update_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=True, comment='The date and time the record was created or last updated.'),
    sa.ForeignKeyConstraint(['group_id'], ['app_fam.fam_group.group_id'], name='reffam_group30'),
    sa.ForeignKeyConstraint(['user_id'], ['app_fam.fam_user.user_id'], name='reffam_user29'),
    sa.PrimaryKeyConstraint('user_id', 'group_id', name='fam_usr_rle_pk_1'),
    schema='app_fam',
    comment='User Group Xref is a cross-reference object that allows for the identification of Groups assigned to a user, as well as the users that belong to a given Group'
    )
    op.create_index(op.f('ix_app_fam_fam_user_group_xref_group_id'), 'fam_user_group_xref', ['group_id'], unique=False, schema='app_fam')
    op.create_index(op.f('ix_app_fam_fam_user_group_xref_user_id'), 'fam_user_group_xref', ['user_id'], unique=False, schema='app_fam')
    op.create_table('fam_user_role_xref',
    sa.Column('user_id', sa.BigInteger(), nullable=False, comment='Automatically generated key used to identify the uniqueness of a User within the FAM Application'),
    sa.Column('role_id', sa.BigInteger(), nullable=False, comment='Automatically generated key used to identify the uniqueness of a Role within the FAM Application'),
    sa.Column('create_user', sa.String(length=30), nullable=False, comment='The user or proxy account that created the record.'),
    sa.Column('create_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=False, comment='The date and time the record was created.'),
    sa.Column('update_user', sa.String(length=30), nullable=True, comment='The user or proxy account that created or last updated the record. '),
    sa.Column('update_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('CURRENT_DATE'), nullable=True, comment='The date and time the record was created or last updated.'),
    sa.ForeignKeyConstraint(['role_id'], ['app_fam.fam_role.role_id'], name='reffam_role12'),
    sa.ForeignKeyConstraint(['user_id'], ['app_fam.fam_user.user_id'], name='reffam_user10'),
    sa.PrimaryKeyConstraint('user_id', 'role_id', name='fam_usr_rle_pk'),
    schema='app_fam',
    comment='User Role Xref is a cross-reference object that allows for the identification of Roles assigned to a user, as well as the users that belong to a given Role'
    )
    op.create_index(op.f('ix_app_fam_fam_user_role_xref_role_id'), 'fam_user_role_xref', ['role_id'], unique=False, schema='app_fam')
    op.create_index(op.f('ix_app_fam_fam_user_role_xref_user_id'), 'fam_user_role_xref', ['user_id'], unique=False, schema='app_fam')
    # ### end Alembic commands ###

    # get default env vars if they exist
    envFilePath = os.path.normpath(os.path.join(os.path.dirname(__file__), '..', '..', '..', '.env'))
    dotenv.load_dotenv(envFilePath)

    # adding the creation of the user in here
    DATABASE_USER = os.getenv('api_db_username')
    DATABASE_USER_PASSWORD = os.getenv('api_db_password')

    createUserSQLRaw = "CREATE USER {api_db_username} WITH NOSUPERUSER NOCREATEDB NOCREATEROLE PASSWORD '{api_db_password}'"

    create_user_sql = sa.sql.text(f"CREATE USER {sa.sql.quoted_name(DATABASE_USER, False)} WITH PASSWORD :database_password")\
        .bindparams(
            database_password=DATABASE_USER_PASSWORD
        )\
        .compile(compile_kwargs={"literal_binds": True})
    conn = op.get_bind()
    print(str(create_user_sql))
    conn.execute(create_user_sql)

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_app_fam_fam_user_role_xref_user_id'), table_name='fam_user_role_xref', schema='app_fam')
    op.drop_index(op.f('ix_app_fam_fam_user_role_xref_role_id'), table_name='fam_user_role_xref', schema='app_fam')
    op.drop_table('fam_user_role_xref', schema='app_fam')
    op.drop_index(op.f('ix_app_fam_fam_user_group_xref_user_id'), table_name='fam_user_group_xref', schema='app_fam')
    op.drop_index(op.f('ix_app_fam_fam_user_group_xref_group_id'), table_name='fam_user_group_xref', schema='app_fam')
    op.drop_table('fam_user_group_xref', schema='app_fam')
    op.drop_index(op.f('ix_app_fam_fam_group_role_xref_role_id'), table_name='fam_group_role_xref', schema='app_fam')
    op.drop_index(op.f('ix_app_fam_fam_group_role_xref_group_id'), table_name='fam_group_role_xref', schema='app_fam')
    op.drop_table('fam_group_role_xref', schema='app_fam')
    op.drop_index(op.f('ix_app_fam_fam_application_group_xref_group_id'), table_name='fam_application_group_xref', schema='app_fam')
    op.drop_index(op.f('ix_app_fam_fam_application_group_xref_application_id'), table_name='fam_application_group_xref', schema='app_fam')
    op.drop_table('fam_application_group_xref', schema='app_fam')
    op.drop_index(op.f('ix_app_fam_fam_role_parent_role_id'), table_name='fam_role', schema='app_fam')
    op.drop_index(op.f('ix_app_fam_fam_role_client_number_id'), table_name='fam_role', schema='app_fam')
    op.drop_index(op.f('ix_app_fam_fam_role_application_id'), table_name='fam_role', schema='app_fam')
    op.drop_table('fam_role', schema='app_fam')
    op.drop_index(op.f('ix_app_fam_fam_group_parent_group_id'), table_name='fam_group', schema='app_fam')
    op.drop_index(op.f('ix_app_fam_fam_group_client_number_id'), table_name='fam_group', schema='app_fam')
    op.drop_table('fam_group', schema='app_fam')
    op.drop_table('fam_application_client', schema='app_fam')
    op.drop_table('fam_user', schema='app_fam')
    op.drop_table('fam_forest_client', schema='app_fam')
    op.drop_table('fam_application', schema='app_fam')
    # ### end Alembic commands ###
    op.execute("drop schema app_fam")