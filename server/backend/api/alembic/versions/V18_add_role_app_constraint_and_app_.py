"""Add Role-App Constraint and App-Environment Attribute

Revision ID: V18
Revises: V17
Create Date: 2023-01-17 16:00:58.613953

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel

from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'V18'
down_revision = 'V17'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Environment Type Code.
    fam_app_environment_type_table=op.create_table('fam_app_environment_type',
    sa.Column('app_environment_type_code', sa.String(length=4), nullable=False, comment='application environment type code'),
    sa.Column('description', sa.String(length=100), nullable=True, comment='Description of what the app_environment_type_code represents.'),
    sa.Column('effective_date', postgresql.TIMESTAMP(precision=6), server_default=sa.text('now()'), nullable=False, comment='The date and time the code was effective.'),
    sa.Column('expiry_date', postgresql.TIMESTAMP(precision=6), nullable=True, comment='The date and time the code expired.'),
    sa.Column('update_date', postgresql.TIMESTAMP(precision=6), nullable=True, comment='The date and time the record was created or last updated.'),
    sa.PrimaryKeyConstraint('app_environment_type_code', name='fam_app_environment_type_pk'),
    schema='app_fam',
    comment='A environment type is a code that is associated with the application to indicate its nvironment.'
    )

    # Insert New Environment Type CODE
    op.bulk_insert(
        fam_app_environment_type_table,
        [
            {
                "app_environment_type_code": "DEV",
                "description": "DEV Environment for Applicaitons.",
            },
            {
                "app_environment_type_code": "TEST",
                "description": "TEST Environment for Applicaitons.",
            },
            {
                "app_environment_type_code": "PROD",
                "description": "PROD Environment for Applicaitons.",
            },
        ],
    )

    # Add Environment Attribute to FAM_APPLICATION / Unique Constraint Change.
    op.add_column('fam_application', sa.Column('app_environment_type_code', sa.String(length=4), server_default='DEV', nullable=True, comment='Identifies which environment the application is for; DEV, TEST, PROD etc.'), schema='app_fam')
    op.create_foreign_key('reffam_app_env_type', 'fam_application', 'fam_app_environment_type', ['app_environment_type_code'], ['app_environment_type_code'], source_schema='app_fam', referent_schema='app_fam')

    # FAM_ROLE constraints change.
    op.alter_column('fam_role', 'application_id',
               existing_type=sa.BIGINT(),
               nullable=False,
               schema='app_fam')
    op.drop_constraint('fam_rle_name_uk', 'fam_role', schema='app_fam', type_='unique')
    op.create_unique_constraint('fam_rlnm_app_uk', 'fam_role', ['role_name', 'application_id'], schema='app_fam')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('fam_rlnm_app_uk', 'fam_role', schema='app_fam', type_='unique')
    op.create_unique_constraint('fam_rle_name_uk', 'fam_role', ['role_name'], schema='app_fam')
    op.alter_column('fam_role', 'application_id',
               existing_type=sa.BIGINT(),
               nullable=True,
               schema='app_fam')
    op.drop_constraint('reffam_app_env_type', 'fam_application', schema='app_fam', type_='foreignkey')
    op.drop_column('fam_application', 'app_environment_type_code', schema='app_fam')
    op.drop_table('fam_app_environment_type', schema='app_fam')
    # ### end Alembic commands ###
