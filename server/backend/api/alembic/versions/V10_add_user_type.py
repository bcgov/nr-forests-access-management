"""add user type

Revision ID: V10
Revises: V9
Create Date: 2022-10-17 11:48:47.163514

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel

from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "V10"
down_revision = "V9"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    fam_user_type_code_table = op.create_table(
        "fam_user_type_code",
        sa.Column(
            "user_type_code",
            sa.String(length=2),
            nullable=False,
            comment="user type code",
        ),
        sa.Column(
            "description",
            sa.String(length=100),
            nullable=True,
            comment="Description of what the user_type_code represents.",
        ),
        sa.Column(
            "effective_date",
            postgresql.TIMESTAMP(precision=6),
            nullable=False,
            server_default=sa.text('LOCALTIMESTAMP'),
            comment="The date and time the code was effective.",
        ),
        sa.Column(
            "expiry_date",
            postgresql.TIMESTAMP(precision=6),
            nullable=True,
            comment="The date and time the code expired.",
        ),
        sa.Column(
            "update_date",
            postgresql.TIMESTAMP(precision=6),
            nullable=True,
            comment="The date and time the record was created or last updated.",
        ),
        sa.PrimaryKeyConstraint("user_type_code", name="fam_user_type_code_pk"),
        schema="app_fam",
        comment="A user type is a code that is associated with the user to indicate its identity provider.",
    )
    op.add_column(
        "fam_user",
        sa.Column(
            "user_type_code",
            sa.String(length=2),
            nullable=False,
            comment="Identifies which type of the user it belongs to; IDIR, BCeID etc.",
        ),
        schema="app_fam",
    )
    op.drop_constraint("fam_usr_uk", "fam_user", schema="app_fam", type_="unique")
    op.create_unique_constraint(
        "fam_usr_uk", "fam_user", ["user_type_code", "user_name"], schema="app_fam"
    )
    op.create_foreign_key(
        "reffam_user_type",
        "fam_user",
        "fam_user_type_code",
        ["user_type_code"],
        ["user_type_code"],
        source_schema="app_fam",
        referent_schema="app_fam",
    )
    op.drop_column("fam_user", "user_type", schema="app_fam")

    op.bulk_insert(
        fam_user_type_code_table,
        [
            {
                "user_type_code": "I",
                "description": "User Type for IDIR users.",
            },
            {
                "user_type_code": "B",
                "description": "User Type for BCeID users.",
            },
        ],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "fam_user",
        sa.Column(
            "user_type", sa.VARCHAR(length=1), autoincrement=False, nullable=False
        ),
        schema="app_fam",
    )
    op.drop_constraint(
        "reffam_user_type", "fam_user", schema="app_fam", type_="foreignkey"
    )
    op.drop_constraint("fam_usr_uk", "fam_user", schema="app_fam", type_="unique")
    op.create_unique_constraint(
        "fam_usr_uk", "fam_user", ["user_type", "user_name"], schema="app_fam"
    )
    op.drop_column("fam_user", "user_type_code", schema="app_fam")
    op.drop_table("fam_user_type_code", schema="app_fam")
    # ### end Alembic commands ###
